<?xml version="1.0"?>

 <!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Tab Sidebar Display.
   -
   - The Initial Developer of the Original Code is
   -     Dave Townsend <dave.townsend@blueprintit.co.uk>.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
   -
   - $HeadURL$
   - $LastChangedBy$
   - $Date$
   - $Revision$
   -->

<!DOCTYPE bindings [
<!ENTITY % bidiDTD SYSTEM "chrome://global/locale/global.dtd">
<!ENTITY % tabbrowserDTD SYSTEM "chrome://global/locale/tabbrowser.dtd" >
<!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd" >
<!ENTITY % tabSidebarDTD SYSTEM "chrome://tabsidebar/locale/tabsidebar.dtd" >
%bidiDTD;
%tabbrowserDTD;
%browserDTD;
%tabSidebarDTD;
]>

<bindings id="TabSidebarBindings2"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xhtml="http://www.w3.org/1999/xhtml">

  <binding id="tabpreview" name="tabpreview">

    <resources>
      <stylesheet src="chrome://tabsidebar/content/widgets/tabpreviews.css"/>
    </resources>
    
    <content class="tbs-tabpreview" orient="vertical" align="stretch" loading="false" security="none">
      <xul:vbox class="tbs-tabmain">
        <xul:hbox class="tbs-topbox" align="center" anonid="topbox">
          <xul:image class="tbs-favicon" validate="never" anonid="favicon" tooltip="tabpreview_tooltip" onerror="this.src=null;"/>
          <xul:image class="tbs-loading" anonid="loading" tooltip="tabpreview_tooltip"/>
          <xul:label class="tbs-title" tooltip="tabpreview_tooltip" flex="1" anonid="title" crop="end"/>
          <xul:toolbarbutton class="tbs-close tbs-icon" anonid="close" tooltiptext="&closeTab.label;"
                             onmousedown="event.stopPropagation();"
                             oncommand="this.parentNode.parentNode.parentNode.close();"/>
        </xul:hbox>
        <xul:stack>
          <xul:box tooltip="tabpreview_tooltip" flex="1" class="tbs-container" anonid="canvas_container">
            <xhtml:canvas class="tbs-canvas" flex="1" anonid="canvas" tooltip="tabpreview_tooltip"/>
          </xul:box>
          <xul:vbox>
            <xul:hbox pack="end" class="tbs-topstrip">
              <xul:toolbarbutton class="tbs-security tbs-icon" anonid="security"
                                 onmousedown="event.stopPropagation();"
                                 oncommand="this.parentNode.parentNode.parentNode.parentNode.parentNode.viewSecurity();"/>
            </xul:hbox>
            <xul:box tooltip="tabpreview_tooltip" flex="1"/>
            <xul:hbox pack="start" class="tbs-bottomstrip">
              <xul:toolbarbutton class="tbs-stop tbs-icon" anonid="stop" disabled="true" tooltiptext="&stopButton.tooltip;"
                                 onmousedown="event.stopPropagation();"
                                 oncommand="this.parentNode.parentNode.parentNode.parentNode.parentNode.stop();"/>
              <xul:spacer flex="1"/>
              <xul:toolbarbutton chromedir="&locale.dir;" type="menu-button" class="tbs-back tbs-icon" anonid="back" disabled="true" tooltiptext="&backButton.tooltip;"
                                 onmousedown="event.stopPropagation();"
                                 onclick="this.parentNode.parentNode.parentNode.parentNode.parentNode.checkMiddleClick(this,event);"
                                 oncommand="this.parentNode.parentNode.parentNode.parentNode.parentNode.goBack(event);">
                <xul:menupopup onpopupshowing="this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.populateBackMenu(event);"
                               oncommand="this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.gotoHistoryIndex(event); event.preventBubble()"
                               onclick="this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.checkMiddleClick(this,event);"/>
              </xul:toolbarbutton>
              <xul:spacer flex="1"/>
              <xul:toolbarbutton chromedir="&locale.dir;" type="menu-button" class="tbs-forward tbs-icon" anonid="forward" disabled="true" tooltiptext="&forwardButton.tooltip;"
                                 onmousedown="event.stopPropagation();"
                                 onclick="this.parentNode.parentNode.parentNode.parentNode.parentNode.checkMiddleClick(this,event);"
                                 oncommand="this.parentNode.parentNode.parentNode.parentNode.parentNode.goForward(event);">
                <xul:menupopup onpopupshowing="this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.populateForwardMenu(event);"
                               oncommand="this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.gotoHistoryIndex(event); event.preventBubble()"
                               onclick="this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.checkMiddleClick(this,event);"/>
              </xul:toolbarbutton>
              <xul:spacer flex="1"/>
              <xul:toolbarbutton class="tbs-reload tbs-icon" anonid="reload" tooltiptext="&reloadButton.tooltip;" onmousedown="event.stopPropagation();" oncommand="this.parentNode.parentNode.parentNode.parentNode.parentNode.reload(event);"/>
            </xul:hbox>
          </xul:vbox>
        </xul:stack>
        <xul:vbox class="tbs-bottombox" tooltip="tabpreview_tooltip" align="stretch" anonid="bottombox">
          <xul:label class="tbs-uri" anonid="uri" crop="end"/>
        </xul:vbox>
      </xul:vbox>
    </content>

    <implementation implements="nsIWebProgressListener,nsISHistoryListener,nsITimerCallback">

      <constructor>
      </constructor>

      <destructor>
        if (this.previews)
          this._logMessage("tabpreview destructor");
        this._destroy();
      </destructor>
      
      <field name="_destroyed" value="false"/>
      <method name="_destroy">
        <body>
          if (!this._destroyed)
          {
            this.loading=false;

            this._changeTimer.cancel();
            this._changeTimer=null;
            this._scrollTimer.cancel();
            this._scrollTimer=null;
            this._loadTimer.cancel();
            this._loadTimer=null;
            this._updateTimer.cancel();
            this._updateTimer=null;
            
            if (this._browser)
            {
              this._emptyDocumentListeners();
              this._removeListeners();
              this._browser=null;
            }

            this._destroyed=true;
          }
        </body>
      </method>
      
      <method name="init">
        <body>
          if (!this._eventListener)
          {
            var self = this;
            this._eventListener = function(event) { self._eventFilter(event); };
          }
          if (this.previews.displayHeight>0)
            this._resize();
        </body>
      </method>
      
      <!-- Quick access to anonymous nodes -->
      
      <field name="_anonymousNodes">this.ownerDocument.getAnonymousNodes(this)[0].childNodes;</field>
      
      <field name="_topbox">
        this._anonymousNodes[0];
      </field>
      
      <field name="uriField">
        this._anonymousNodes[2].firstChild;
      </field>
      
      <field name="titleField">
        this._topbox.childNodes[2];
      </field>
      
      <field name="faviconIcon">
        this._topbox.firstChild;
      </field>
      
      <field name="_stack">
        this._anonymousNodes[1]
      </field>
      
      <field name="reloadButton">
        this._stack.lastChild.lastChild.lastChild;
      </field>
      
      <field name="stopButton">
        this._stack.lastChild.lastChild.firstChild;
      </field>
      
      <field name="backButton">
        this.stopButton.nextSibling.nextSibling;
      </field>
      
      <field name="forwardButton">
        this.backButton.nextSibling.nextSibling;
      </field>
      
      <field name="securityIcon">
        this._stack.lastChild.firstChild.lastChild;
      </field>
      
      <field name="canvas">
        this._stack.firstChild.firstChild;
      </field>
      
      <!-- Event handling gubbins -->
      
      <field name="_eventListener"/>
      
      <method name="_addListeners">
        <body>
          this._logMessage("Add browser listeners");
          
          this._browser.addEventListener("DOMTitleChanged", this._eventListener, false);
          this._browser.addEventListener("resize", this._eventListener, false);
          this._browser.addEventListener("scroll", this._eventListener, true);
          this._browser.addEventListener("load", this._eventListener, true);
          this._browser.addEventListener("unload", this._eventListener, true);
          var WP = Components.interfaces.nsIWebProgress;
          var mask = WP.NOTIFY_STATE_DOCUMENT | WP.NOTIFY_STATUS | WP.NOTIFY_LOCATION | WP.NOTIFY_SECURITY | WP.NOTIFY_PROGRESS;
          if (this._browser.docShell)
          {
            this._browser.webProgress.addProgressListener(this._progressListener,mask);
            //this._browser.sessionHistory.addSHistoryListener(this._historyListener);
          }
          WP=null;
          mask=null;
        </body>
      </method>
      
      <method name="_removeListeners">
        <body>
          try
          {
            this._logMessage("Remove browser listeners");
          
            this._browser.removeEventListener("DOMTitleChanged", this._eventListener, false);
            this._browser.removeEventListener("resize", this._eventListener, false);
            this._browser.removeEventListener("scroll", this._eventListener, true);
            this._browser.removeEventListener("load", this._eventListener, true);
            this._browser.removeEventListener("unload", this._eventListener, true);
            if (this._browser.docShell)
            {
              this._browser.webProgress.removeProgressListener(this._progressListener);
              //this._browser.sessionHistory.removeSHistoryListener(this._historyListener);
            }
          }
          catch (e)
          {
            dump(e+"\n");
          }
        </body>
      </method>
      
      <field name="_listenedDocuments">[]</field>
      
      <method name="_addDocumentListeners">
      	<parameter name="doc"/>
        <body>
        <![CDATA[
          var pos = this._listenedDocuments.indexOf(doc);
          if (pos<0)
          {
            this._logMessage("Add document listeners\n");
            
            doc.addEventListener("DOMNodeInserted", this._eventListener, true);
            doc.addEventListener("DOMNodeRemoved", this._eventListener, true);
            doc.addEventListener("DOMNodeRemovedFromDocument", this._eventListener, true);
            doc.addEventListener("DOMNodeInsertedIntoDocument", this._eventListener, true);
            doc.addEventListener("DOMAttrModified", this._eventListener, true);
            doc.addEventListener("DOMCharacterDataModified", this._eventListener, true);
            doc.addEventListener("DOMElementNameChanged", this._eventListener, true);
            doc.addEventListener("DOMAttributeNameChanged", this._eventListener, true);
            doc.addEventListener("DOMActivate", this._eventListener, true);
            doc.addEventListener("DOMFocusIn", this._eventListener, true);
            doc.addEventListener("DOMFocusOut", this._eventListener, true);
            doc.addEventListener("DOMSubtreeModified", this._eventListener, true);
            doc.addEventListener("scroll", this._eventListener, true);
            this._listenedDocuments.push(doc);
          }
          else
          {
            this._logMessage("Listeners already added\n");
          }
        ]]>
        </body>
      </method>
      
      <method name="_removeDocumentListeners">
        <parameter name="doc"/>
        <body>
        <![CDATA[
          var pos = this._listenedDocuments.indexOf(doc);
          if (pos>=0)
          {
            this._logMessage("Remove document listeners\n");
            
            doc.removeEventListener("DOMNodeInserted", this._eventListener, true);
            doc.removeEventListener("DOMNodeRemoved", this._eventListener, true);
            doc.removeEventListener("DOMNodeRemovedFromDocument", this._eventListener, true);
            doc.removeEventListener("DOMNodeInsertedIntoDocument", this._eventListener, true);
            doc.removeEventListener("DOMAttrModified", this._eventListener, true);
            doc.removeEventListener("DOMCharacterDataModified", this._eventListener, true);
            doc.removeEventListener("DOMElementNameChanged", this._eventListener, true);
            doc.removeEventListener("DOMAttributeNameChanged", this._eventListener, true);
            doc.removeEventListener("DOMActivate", this._eventListener, true);
            doc.removeEventListener("DOMFocusIn", this._eventListener, true);
            doc.removeEventListener("DOMFocusOut", this._eventListener, true);
            doc.removeEventListener("DOMSubtreeModified", this._eventListener, true);
            doc.removeEventListener("scroll", this._eventListener, true);
            this._listenedDocuments.splice(pos,1);
          }
          else
          {
            this._logMessage("Listeners already removed\n");
          }
        ]]>
        </body>
      </method>
      
      <method name="_emptyDocumentListeners">
        <body>
        <![CDATA[
          while (this._listenedDocuments.length>0)
          {
            this._removeDocumentListeners(this._listenedDocuments[0]);
          }
        ]]>
        </body>
      </method>
      
      <method name="_findDocuments">
      	<parameter name="doc"/>
      	<body>
      	<![CDATA[
      		if (doc)
      		{
            if (doc.contentDocument && (doc.contentDocument instanceof Document))
              doc=doc.contentDocument;

            if (doc instanceof Document)
              this._addDocumentListeners(doc);

            if (doc.getElementsByTagName)
            {
  	      		var subdocs = doc.getElementsByTagName("frame");
  	      		for (var pos = 0; pos<subdocs.length; pos++)
  	      		{
                this._logMessage("Adding new frame");
        				this._findDocuments(subdocs[pos].contentDocument);
  	      		}
  	      		subdocs = doc.getElementsByTagName("iframe");
  	      		for (var pos = 0; pos<subdocs.length; pos++)
  	      		{
                this._logMessage("Adding new iframe");
        				this._findDocuments(subdocs[pos].contentDocument);
  	      		}
  	      		subdocs = doc.getElementsByTagName("browser");
  	      		for (var pos = 0; pos<subdocs.length; pos++)
  	      		{
                this._logMessage("Adding new browser");
        				this._findDocuments(subdocs[pos].contentDocument);
  	      		}
            }
	      	}
          else
          {
            this._logMessage("Attempt to add null doc");
          }
				]]>
      	</body>
      </method>
      
      <method name="_checkDocuments">
        <body>
        <![CDATA[
          if ((!this._browser)||(!this._browser.docShell))
            return;
            
          if (this._listenedDocuments.length>0)
          {
            if (this._listenedDocuments.indexOf(this._browser.contentDocument)>=0)
              return;
          }
          
          this._logWarning("Bad document tree detected");

          this._emptyDocumentListeners();
          this._findDocuments(this._browser.contentDocument);
          
          this._documentLoaded();
        ]]>
        </body>
      </method>
      
      <method name="_documentLoaded">
        <body>
          if (!this.previews)
            return;
            
          var delay = this.previews.loadDelay;
          if (!this.selected)
            delay = this.previews.unselectedLoadDelay;
          this._loadTimer.cancel();
          this._loadTimed=true;
          this._loadTimer.initWithCallback(this._timerListener, delay, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
        </body>
      </method>
      
      <method name="_documentTextInput">
        <body>
          if (!this.previews)
            return;
            
          var delay = this.previews.textDelay;
          if (!this.selected)
            delay = this.previews.unselectedTextDelay;
          this._textTimer.cancel();
          this._textTimed=true;
          this._textTimer.initWithCallback(this._timerListener, delay, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
        </body>
      </method>
      
      <method name="_documentChanged">
        <body>
          if (!this.previews)
            return;
            
          var delay = this.previews.changeDelay;
          if (!this.selected)
            delay = this.previews.unselectedChangeDelay;
          this._changeTimer.cancel();
          this._changeTimed=true;
          this._changeTimer.initWithCallback(this._timerListener, delay, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
        </body>
      </method>
      
      <method name="_documentScrolled">
        <body>
          if (!this.previews)
            return;
            
          var delay = this.previews.scrollDelay;
          if (!this.selected)
            delay = this.previews.unselectedScrollDelay;
          this._scrollTimer.cancel();
          this._scrollTimed=true;
          this._scrollTimer.initWithCallback(this._timerListener, delay, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
        </body>
      </method>
      
      <method name="_eventFilter">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if (!this.previews)
            return;
          
          //this._logMessage("Event - "+event.type);
          if (event.type=="DOMTitleChanged")
          {
            this.onTitleChange();
          }
          else if (event.type=="resize")
          {
            this._logMessage("Browser resized");
            this._updateSize(false);
          }
          else if (event.type=="load")
          {
            if (event.originalTarget instanceof Document)
            {
              this._addDocumentListeners(event.originalTarget);
              this._documentLoaded();
            }
          }
          else if (event.type=="unload")
          {
            this._logMessage("unload "+event.originalTarget);
            var doc = null;
            if (event.originalTarget)
            {
              if (event.originalTarget instanceof Document)
              {
                doc=event.originalTarget;
              }
              else if (event.originalTarget.document)
              {
                doc=event.originalTarget.document;
              }
              else if (event.originalTarget.contentDocument)
              {
                doc=event.originalTarget.contentDocument;
              }
              else if (event.originalTarget.ownerDocument.documentElement==event.originalTarget)
              {
                doc=event.originalTarget.ownerDocument;
              }
            }
            
            if (doc)
            {
              this._removeDocumentListeners(doc);
            }
            else
            {
              this._logMessage("Unload of "+event.originalTarget);
            }
          }
          else if ((event.type=="scroll")&&(!this.loading))
          {
            this._documentScrolled();
          }
          else if ((event.type.substring(0,3)=="DOM")&&(!this.loading))
          {
            if ((event.type=="DOMAttrModified")&&
               ((event.attrName=="curpos")
              ||(event.attrName=="maxpos")
              ||(event.attrName=="pageincrement")))
            {
                this._documentScrolled();
                return;
            }
            if ((event.type=="DOMNodeInserted")||(event.type=="DOMNodeInsertedIntoDocument"))
            {
              this._findDocuments(event.target);
            }
            if ((event.type=="DOMNodeInserted")||(event.type=="DOMNodeInsertedIntoDocument")||(event.type=="DOMCharacterDataModified"))
            {
              if (event.target instanceof HTMLTextAreaElement)
              {
                this._documentTextInput();
                return;
              }
              if (event.target instanceof HTMLInputElement)
              {
                if ((event.target.type=="text")||(event.target.type=="password"))
                {
                  this._documentTextInput();
                  return;
                }
              }
            }
            this._documentChanged();
          }
        ]]>
        </body>
      </method>
      
      <field name="_historyListener">({
          tabpreview: this,

          OnHistoryGoBack : function(backURI)
          {
            return this.tabpreview.OnHistoryGoBack(backURI);
          },

          OnHistoryGoForward : function(forwardURI)
          {
            return this.tabpreview.OnHistoryGoForward(forwardURI);
          },
          
          OnHistoryGotoIndex : function(index, gotoURI)
          {
            return this.tabpreview.OnHistoryGotoIndex(index,gotoURI);
          },
          
          OnHistoryNewEntry : function(newURI)
          {
            this.tabpreview.OnHistoryNewEntry(newURI);
          },
          
          OnHistoryPurge : function(numEntries)
          {
            return this.tabpreview.OnHistoryPurge(numEntries);
          },
          
          OnHistoryReload : function(reloadURI, reloadFlags)
          {
            return this.tabpreview.OnHistoryReload(reloadURI, reloadFlags);
          },

          QueryInterface : function(aIID)
          {
            if (aIID.equals(Components.interfaces.nsISHistoryListener) ||
                aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
                aIID.equals(Components.interfaces.nsISupports))
              return this;
            throw Components.results.NS_NOINTERFACE;
          }
        });</field>
      
      <field name="_timerListener">({
          tabpreview: this,

          notify : function(timer)
          {
            this.tabpreview.notify(timer);
          },

          QueryInterface : function(aIID)
          {
            if (aIID.equals(Components.interfaces.nsITimerCallback) ||
                aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
                aIID.equals(Components.interfaces.nsISupports))
              return this;
            throw Components.results.NS_NOINTERFACE;
          }
        });</field>
      
      <field name="_progressListener">({
          tabpreview: this,

          onProgressChange : function (aWebProgress, aRequest,
                                       aCurSelfProgress, aMaxSelfProgress,
                                       aCurTotalProgress, aMaxTotalProgress)
          {
            this.tabpreview.onProgressChange(aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
          },

          onStateChange : function(aWebProgress, aRequest, aStateFlags, aStatus)
          {
            this.tabpreview.onStateChange(aWebProgress, aRequest, aStateFlags, aStatus);
          },

          onLocationChange : function(aWebProgress, aRequest, aLocation)
          {
            this.tabpreview.onLocationChange(aWebProgress, aRequest, aLocation);
          },

          onStatusChange : function(aWebProgress, aRequest, aStatus, aMessage)
          {
            this.tabpreview.onStatusChange(aWebProgress, aRequest, aStatus, aMessage);
          },

          onSecurityChange : function(aWebProgress, aRequest, aState)
          {
            this.tabpreview.onSecurityChange(aWebProgress, aRequest, aState);
          },

          QueryInterface : function(aIID)
          {
            if (aIID.equals(Components.interfaces.nsIWebProgressListener) ||
                aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
                aIID.equals(Components.interfaces.nsISupports))
              return this;
            throw Components.results.NS_NOINTERFACE;
          }
        });</field>
      <field name="_resizeListener"/>

      <!-- Internal fields and methods -->
      
      <field name="_invalid">false</field>
      
      <method name="_logMessage">
        <parameter name="message"/>
        <body>
        <![CDATA[
          if (this.previews && this.previews._enableLogging)
          {
            Components.classes['@mozilla.org/consoleservice;1']
                      .getService(Components.interfaces.nsIConsoleService)
                      .logStringMessage("Tab Sidebar: "+message);
          }
        ]]>
        </body>
      </method>
      
      <method name="_logWarning">
        <parameter name="message"/>
        <body>
        <![CDATA[
          if (this.previews && this.previews._enableLogging)
          {
            var msg = Components.classes["@mozilla.org/scripterror;1"].createInstance(Components.interfaces.nsIScriptError);
            
            msg.init("Tab Sidebar: "+message,
                     "chrome://tabsidebar/content/widgets/tabpreview.xml",
                     "",
                     0,
                     0,
                     Components.interfaces.nsIScriptError.warningFlag,
                     "XUL JavaScript");
            
            var console = Components.classes["@mozilla.org/consoleservice;1"]
                                    .getService(Components.interfaces.nsIConsoleService);
            console.logMessage(msg);
          }
        ]]>
        </body>
      </method>
      
      <method name="_logError">
        <parameter name="message"/>
        <body>
        <![CDATA[
          if (this.previews && this.previews._enableLogging)
          {
            var msg = Components.classes["@mozilla.org/scripterror;1"].createInstance(Components.interfaces.nsIScriptError);
            
            msg.init("Tab Sidebar: "+message,
                     "chrome://tabsidebar/content/widgets/tabpreview.xml",
                     "",
                     0,
                     0,
                     Components.interfaces.nsIScriptError.errorFlag,
                     "XUL JavaScript");
            
            var console = Components.classes["@mozilla.org/consoleservice;1"]
                                    .getService(Components.interfaces.nsIConsoleService);
            console.logMessage(msg);
          }
        ]]>
        </body>
      </method>

      <field name="_browserWidth">-1</field>
      <field name="_browserHeight">-1</field>
      
      <method name="_updateSize">
        <parameter name="forceRedraw"/>
        <body>
        <![CDATA[
          var width = this._browser.parentNode.boxObject.width;
          var height = this._browser.parentNode.boxObject.height;
          
          var findbar = this._browser.ownerDocument.getElementById("FindToolbar");
          if (!findbar.hidden)
          {
            height+=findbar.boxObject.height;
          }
          
          this._logMessage("new size: "+width+"x"+height);
          var shouldRedraw = forceRedraw || this._browserWidth != width || this._browserHeight != height;
          
          this._browserWidth = width;
          this._browserHeight = height;
          this.previews.browserResized(this,this._browserWidth,this._browserHeight);
          if (shouldRedraw)
          {
            this.redraw();
            return true;
          }
          return false;
        ]]>
        </body>
      </method>
      
      <field name="_changeTimer">
        Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
      </field>
      <field name="_changeTimed">false</field>
      
      <field name="_textTimer">
        Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
      </field>
      <field name="_textTimed">false</field>
      
      <field name="_scrollTimer">
        Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
      </field>
      <field name="_scrollTimed">false</field>
      
      <field name="_loadTimer">
        Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
      </field>
      <field name="_loadTimed">false</field>
      
      <field name="_updateTimer">
        Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
      </field>
      
      <field name="_browser"></field>
      <property name="browser">
        <getter>
          return this._browser;
        </getter>
        <setter>
        <![CDATA[
          if (this._browser)
          {
            this._removeListeners();
            this._emptyDocumentListeners();
          }
          this._browser=val;
          if (val)
          {
            var tab = this.tab;
            if (tab && tab.getAttribute("busy") == "true")
            {
              this._loadStarted();
            }
            else
            {
              this.loading=false;
            }

            if (this._browser.docShell)
            {
              if (this._browser.securityUI)
              {
                this._setSecurity(this._browser.securityUI.state);
              }
  						this._findDocuments(this._browser.contentDocument);
            }
            this._addListeners();
            
            this._logMessage("Browser added");
            this._updateSize(true);
            this.update();
          }
        ]]>
        </setter>
      </property>

      <method name="_resize">
        <body>
        <![CDATA[
          if (this.previews.displayHeight<0)
          {
            this._logWarning("Attempt to resize preview before size has been calculated");
            return;
          }
          //this._logMessage("resize");

          var canvas = this.canvas;

          //canvas.style.width=this.previews.displayWidth+"px";  /* Don't set this or the auto-sizing won't work */
          canvas.style.height=this.previews.displayHeight+"px";
          canvas.style.minHeight=this.previews.displayHeight+"px";
          canvas.style.maxHeight=this.previews.displayHeight+"px";
          
          try
          {
            canvas.getContext("2d");
          }
          catch (e)
          {
          }
        ]]>
        </body>
      </method>
      
      <method name="_loadStarted">
        <body>
        <![CDATA[
          this.loading=true;
          this._invalid=true;
          this.stopButton.disabled=false;

          this._emptyDocumentListeners();
          this._changeTimer.cancel();
          this._scrollTimer.cancel();
          this._loadTimer.cancel();
          this._changeTimed=false;
          this._scrollTimed=false;
          this._loadTimed=false;
          
          this._updateTimer.cancel();
          if ((this.previews)&&(this.previews.loadRefresh))
          {
            this._updateTimer.initWithCallback(this._timerListener, 
                                             this.previews.loadRefreshRate, 
                                             Components.interfaces.nsITimer.TYPE_REPEATING_SLACK);
          }
        ]]>
        </body>
      </method>
      
      <method name="_loadComplete">
        <body>
          this.loading=false;
          this.stopButton.disabled=true;
          this._updateTimer.cancel();

          this._emptyDocumentListeners();

          if (this._browser.docShell)
            this._findDocuments(this._browser.contentDocument);

          this._documentLoaded();
        </body>
      </method>
      
      <method name="_setSecurity">
        <parameter name="state"/>
        <body>
        <![CDATA[
          const WPL = Components.interfaces.nsIWebProgressListener;
                       
          switch (state)
          {
            case WPL.STATE_IS_SECURE | WPL.STATE_SECURE_HIGH:
              this.setAttribute("security", "high");
              break;
            case WPL.STATE_IS_SECURE | WPL.STATE_SECURE_LOW:
              this.setAttribute("security", "low");
              break;
            case WPL.STATE_IS_BROKEN:
              this.setAttribute("security", "broken");
              break;
            case WPL.STATE_IS_INSECURE:
            default:
              this.setAttribute("security", "none");
              break;
          }
          
          var icon = this.securityIcon;
          if ((this._browser.docShell)&&(this._browser.securityUI))
          {
            icon.setAttribute("tooltiptext",this._browser.securityUI.tooltipText);
          }
          else
          {
            icon.removeAttribute("tooltiptext");
          }
        ]]>
        </body>
      </method>
      
      <!-- Helper properties -->
      
      <property name="previews">
        <getter>
          return this.parentNode;
        </getter>
      </property>
      
      <property name="tab">
        <getter>
          return this.previews.getTabForPreview(this);
        </getter>
      </property>
      
      <!-- Attribute based properties -->
      
      <property name="loading">
        <getter>
        <![CDATA[
          return this.hasAttribute("loading") && (this.getAttribute("loading")=="true");
        ]]>
        </getter>
        <setter>
        <![CDATA[
          if (!val)
          {
            this.setAttribute("loading","false");
          }
          else
          {
            this.setAttribute("loading","true");
          }
          return val;
        ]]>
        </setter>
      </property>
      
      <property name="selected">
        <getter>
        <![CDATA[
          return this.hasAttribute("selected") && (this.getAttribute("selected")=="true");
        ]]>
        </getter>
        <setter>
        <![CDATA[
          if (!val)
          {
            this.setAttribute("selected","false");
          }
          else
          {
            this.setAttribute("selected","true");
          }
          return val;
        ]]>
        </setter>
      </property>
      
      <!-- Configuration options -->
      <!-- Properties generated from the browser -->
      
      <property name="title">
        <getter>
          if ((!this._browser)||(!this._browser.docShell))
            return "";

          var title = this._browser.contentTitle;
          if (title &amp;&amp; title.length&gt;0)
          {
            return title;
          }
          else
          {
            return "&untitledTab;";
          }
        </getter>
      </property>

      <property name="uri">
        <getter>
          if ((!this._browser)||(!this._browser.docShell))
            return "";

          var uri = this._browser.currentURI;
          if (uri)
          {
            return uri.spec;
          }
          else
          {
            return "";
          }
        </getter>
      </property>

      <property name="icon">
        <getter>
        <![CDATA[
          if (!this._browser)
            return null;

          if ((Components.classes["@mozilla.org/browser/favicon-service;1"])&&(this._browser.docShell))
          {
            var favis = Components.classes["@mozilla.org/browser/favicon-service;1"]
                                  .getService(Components.interfaces.nsIFaviconService);
            return favis.getFaviconImageForPage(this._browser.currentURI).spec;
          }
          else
            return this._browser.mIconURL;
        ]]>
        </getter>
      </property>

      <!-- Methods -->
      
      <method name="checkMiddleClick">
        <parameter name="node"/>
        <parameter name="event"/>
        <body>
        <![CDATA[
          if (event.button == 1)
          {
            var func = new Function("event",node.getAttribute("oncommand"));
            func.call(node,event);
            if ("tagName" in node)
            {
              if (node.namespaceURI == "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
                  && (node.tagName == "menupopup" || node.tagName == "popup"))
                node.hidePopup();
            }
          }
        ]]>
        </body>
      </method>
      
      <method name="reload">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ((this._browser)&&(this._browser.docShell))
          {
            if (event && event.shiftKey)
            {
              var reloadFlags = Components.interfaces.nsIWebNavigation.LOAD_FLAGS_BYPASS_PROXY | 
                                Components.interfaces.nsIWebNavigation.LOAD_FLAGS_BYPASS_CACHE;
              this._browser.reloadWithFlags(reloadFlags);
            }
            else
            {
              this._browser.reload();
            }
          }
        ]]>
        </body>
      </method>

      <method name="stop">
        <body>
        <![CDATA[
          if ((this._browser)&&(this._browser.docShell))
            this._browser.stop();
        ]]>
        </body>
      </method>

      <method name="gotoHistoryIndex">
        <parameter name="event"/>
        <body>
          var index = event.target.getAttribute("index");
          if (!index)
            return false;

          var where = whereToOpenLink(event);

          if (where == "current") {
            // Normal click.  Go there in the current tab and update session history.
            this._browser.gotoIndex(index);
            return true;
          }
          else {
            // Modified click.  Go there in a new tab/window.
            // This code doesn't copy history or work well with framed pages.

            var sessionHistory = this._browser.sessionHistory;
            var entry = sessionHistory.getEntryAtIndex(index, false);
            var url = entry.URI.spec;
            openUILinkIn(url, where);
            return true;
          }
        </body>
      </method>
      
      <method name="goBack">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ((this._browser)&&(this._browser.docShell))
          {
            if (event)
            {
              var where = whereToOpenLink(event, false, false);
              if (where == "current")
              {
                this._browser.goBack();
              }
              else
              {
                var sessionHistory = this._browser.sessionHistory;
                var currentIndex = sessionHistory.index;
                var entry = sessionHistory.getEntryAtIndex(currentIndex - 1, false);
                var url = entry.URI.spec;
                openUILinkIn(url, where);
              }
            }
            else
            {
              this._browser.goBack();
            }
          }
        ]]>
        </body>
      </method>
      
      <method name="populateBackMenu">
        <parameter name="event"/>
        <body>
        <![CDATA[
          var menu = event.target;
          
          while (menu.firstChild)
            menu.removeChild(menu.firstChild);

          if ((this._browser)&&(this._browser.docShell))
          {
            var sessionHistory = this._browser.sessionHistory;
  
            var index = sessionHistory.index;
            var entry;
  
            var end = (index > 8) ? index - 8 : 0;
            if ((index - 1) < end) return false;
            for (var pos = index - 1; pos >= end; pos--)
            {
              entry = sessionHistory.getEntryAtIndex(pos, false);
              if (entry)
              {
                var menuitem = document.createElement("menuitem");
                menuitem.setAttribute("label", entry.title);
                menuitem.setAttribute("index", pos);
                menu.appendChild(menuitem);
              }
            }
          }
          return true;
        ]]>
        </body>
      </method>

      <method name="goForward">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ((this._browser)&&(this._browser.docShell))
          {
            if (event)
            {
              var where = whereToOpenLink(event, false, false);
              if (where == "current")
              {
                this._browser.goForward();
              }
              else
              {
                var sessionHistory = this._browser.sessionHistory;
                var currentIndex = sessionHistory.index;
                var entry = sessionHistory.getEntryAtIndex(currentIndex + 1, false);
                var url = entry.URI.spec;
                openUILinkIn(url, where);
              }
            }
            else
            {
              this._browser.goForward();
            }
          }
        ]]>
        </body>
      </method>

      <method name="populateForwardMenu">
        <parameter name="event"/>
        <body>
        <![CDATA[
          var menu = event.target;
          
          while (menu.firstChild)
            menu.removeChild(menu.firstChild);

          if ((this._browser)&&(this._browser.docShell))
          {
            var sessionHistory = this._browser.sessionHistory;
  
            var index = sessionHistory.index;
            var count = sessionHistory.count;
            var entry;
  
            var end  = ((count-index) > 8) ? index + 8 : count - 1;
            if ((index + 1) > end) return false;
            for (var pos = index + 1; pos <= end; pos++)
            {
              entry = sessionHistory.getEntryAtIndex(pos, false);
              if (entry)
              {
                var menuitem = document.createElement("menuitem");
                menuitem.setAttribute("label", entry.title);
                menuitem.setAttribute("index", pos);
                menu.appendChild(menuitem);
              }
            }
          }
          return true;
        ]]>
        </body>
      </method>

      <method name="viewSecurity">
        <body>
          var tabbrowser = this.previews.tabbrowser;
          if (tabbrowser.selectedTab!=this.tab)
          {
            tabbrowser.selectedTab=this.tab;
          }
          
          this.previews.window.setTimeout(this.previews.window.displaySecurityInfo,10);
        </body>
      </method>

      <method name="close">
        <body>
          var tabbrowser = this.previews.tabbrowser;
          if (this.previews.previews.length == 1)
          {
            tabbrowser.loadURI("about:blank");
            if (this._browser.docShell)
            {
              this._browser.sessionHistory.PurgeHistory(this._browser.sessionHistory.count);
            }
          }
          else
          {
            if (!this.id)
          	 this.id=this._browser.parentNode.id;

            var tab = this.tab;
            this._destroy();
            tabbrowser.removeTab(tab);
          }
        </body>
      </method>

      <method name="update">
        <body>
          this.onLocationChange();

          this.onLinkIconAvailable();

          this.onTitleChange();
        </body>
      </method>
      
      <method name="historyChange">
        <body>
        <![CDATA[
          if ((this._browser)&&(this._browser.docShell))
          {
            var session = this._browser.sessionHistory;
            this.backButton.disabled=(session.index<=0);
            this.forwardButton.disabled=((session.index+1)==session.count);
          }
          else
          {
            this.backButton.disabled=true;
            this.forwardButton.disabled=true;
          }
        ]]>
        </body>
      </method>
      
      <method name="redraw">
        <body>
          if (!this.loading)
            this._redraw();
        </body>
      </method>
      
      <method name="_redraw">
        <body>
        <![CDATA[
          if (!this.previews)
            return;
          
          if (this.previews.displayHeight==0)
          {
            this._logWarning("Cancelling redraw");
            return;
          }
          var canvas = this.canvas;
          if (!canvas)
          {
            this._logError("Canvas doesnt exist.");
            return;
          }
          if (!canvas.hasAttribute("style"))
          {
            this._logWarning("Attempt to redraw before resize");
            return;
          }
          //this._logMessage("redraw");
          canvas.width = this.previews.contentWidth;
          canvas.height = this.previews.contentHeight;
          var ctx = null;
          try
          {
            ctx = canvas.getContext("2d");
          }
          catch (e)
          {
            return;
          }
          if ((this._browser)&&(this._browser.docShell))
          {
            var win = this._browser.contentWindow;
            var width = this._browserWidth;
            var scaling = this.previews.contentWidth/width;
            var height = Math.round(this.previews.contentHeight/scaling);
            ctx.save();
            ctx.scale(scaling,this.previews.contentHeight/height);
            try
            {
              var top = 0;
              var left = 0;
              if (this.previews.drawScrolled)
              {
                top=win.scrollY;
                left=win.scrollX;
              }
              else
              {
                height=Math.max(height,win.scrollY+1);
              }
              ctx.drawWindow(win,left,top,width,height,"rgba(255,255,255,255)");
            }
            catch (e)
            {
              dump(e+"\n");
              dump(win+" "+width+"x"+height+"\n");
            }
            ctx.restore();
          }
          else
          {
            ctx.clearRect(0, 0, this.previews.contentWidth, this.previews.contentHeight);
          }
        ]]>
        </body>
      </method>
      
      <!--  Start of nsISHistoryListener implementation -->
      <method name="OnHistoryGoBack">
        <parameter name="backURI"/>
        <body>
          this.historyChange();
          return true;
        </body>
      </method>
      
      <method name="OnHistoryGoForward">
        <parameter name="forwardURI"/>
        <body>
          this.historyChange();
          return true;
        </body>
      </method>
      
      <method name="OnHistoryGotoIndex">
        <parameter name="index"/>
        <parameter name="gotoURI"/>
        <body>
          this.historyChange();
          return true;
        </body>
      </method>
      
      <method name="OnHistoryNewEntry">
        <parameter name="newURI"/>
        <body>
          this.historyChange();
        </body>
      </method>
      
      <method name="OnHistoryPurge">
        <parameter name="numEntries"/>
        <body>
          this.historyChange();
          return true;
        </body>
      </method>
      
      <method name="OnHistoryReload">
        <parameter name="reloadURI"/>
        <parameter name="reloadFlags"/>
        <body>
          this.historyChange();
          return true;
        </body>
      </method>
      
      <!--  Start of nsIWebProgressListener implementation -->

      <method name="onLocationChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="location"/>
        <body>
          this._logMessage("onLocationChange");
          var uri = this.uri;

          var el = this.uriField;
          if (el)
            el.value=this.uri;

          var reload = this.reloadButton;
          reload.disabled=(uri=="about:blank" || uri=="");

          this.historyChange();
            
          if (!this.loading)
            this._checkDocuments();
        </body>
      </method>
      
      <method name="onStateChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="stateFlags"/>
        <parameter name="status"/>
        <body>
        <![CDATA[
          //this._logMessage("onStateChange "+stateFlags+" "+status);
          if (stateFlags & Components.interfaces.nsIWebProgressListener.STATE_IS_DOCUMENT)
          {
          	if (stateFlags & Components.interfaces.nsIWebProgressListener.STATE_STOP)
          	{
              if (this.loading)
                this._loadComplete();
              else
                this._logWarning("Received repeat load - "+stateFlags+"\n");
            }
            else if (stateFlags & Components.interfaces.nsIWebProgressListener.STATE_START)
            {
              this._loadStarted();
            }
      		}
      	]]>
        </body>
      </method>
      
      <method name="onStatusChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="status"/>
        <parameter name="message"/>
        <body>
          //this._logMessage("onStatusChange "+status);
        </body>
      </method>
      
      <method name="onProgressChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="curSelfProgress"/>
        <parameter name="maxSelfProgress"/>
        <parameter name="curTotalProgress"/>
        <parameter name="maxTotalProgress"/>
        <body>
          //this._logMessage("onProgressChange ");
          this._invalid=true;
        </body>
      </method>
      
      <method name="onSecurityChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="state"/>
        <body>
          //this._logMessage("onSecurityChange "+state);
          this._setSecurity(state);
        </body>
      </method>
      
      <method name="onLinkIconAvailable">
        <body>
          this._logMessage("onLinkIconAvailable");
          var el = this.faviconIcon;
          if (el)
            el.src=this.icon;
            
          if (!this.loading)
            this._checkDocuments();
        </body>
      </method>

      <method name="onTitleChange">
        <body>
          this._logMessage("onTitleChange");
          var el = this.titleField;
      
          if (el)
            el.value=this.title;
            
          if (!this.loading)
            this._checkDocuments();
        </body>
      </method>
            
      <!--  Start of nsITimerCallback implementation -->

      <method name="notify">
        <parameter name="timer"/>
        <body>
        <![CDATA[
          if (!this.previews)
            return;
          
          if (timer==this._updateTimer)
          {
            //this.update();
            if (this._invalid)
            {
              this._redraw();
              this._invalid=false;
            }
            return;
          }
          else if (timer==this._loadTimer)
          {
            this._logMessage("loadTimer fired");
            this._loadTimed=false;
          }
          else if (timer==this._changeTimer)
          {
            this._logMessage("changeTimer fired");
            this._changeTimed=false;
          }
          else if (timer==this._textTimer)
          {
            this._logMessage("textTimer fired");
            this._textTimed=false;
          }
          else if (timer==this._scrollTimer)
          {
            this._logMessage("scrollTimer fired");
            this._scrollTimed=false;
          }
          else
          {
            return;
          }

          if ((this._scrollTimed)||(this._loadTimed)||(this._changeTimed)||(this._textTimed))
            return;

          this.redraw();

          if (timer==this._loadTimer)
            this.update();
        ]]>
        </body>
      </method>
      
    </implementation>

    <handlers>
      <handler event="mousedown">
      <![CDATA[
        if (!this.previews)
          return;
          
        if (!this._browser)
          return;

        if (!this.previews)
          return;
          
        var tabbrowser = this.previews.tabbrowser;
        if (event.button==1)
        {
          tabbrowser.removeTab(this.tab);
        }
        else if (event.button==2)
        {
        }
        else
        {
          if (tabbrowser.selectedTab != this.tab)
          {
            var focus = false;
            if (document.commandDispatcher.focusedElement && document.commandDispatcher.focusedElement.parentNode==this.parentNode)
            {
              focus=true;
              this.tab.focus();
            }
            tabbrowser.selectedTab=this.tab;
            if (focus)
              this.focus();
          }
          else
          {
            this.focus();
          }
        }
      ]]>
      </handler>
    </handlers>
      
  </binding>

</bindings>
