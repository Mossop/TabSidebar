<?xml version="1.0"?>

 <!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Tab Sidebar Display.
   -
   - The Initial Developer of the Original Code is
   -     Dave Townsend <dave.townsend@blueprintit.co.uk>.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
   -
   - $HeadURL$
   - $LastChangedBy$
   - $Date$
   - $Revision$
   -->

<!DOCTYPE bindings [
<!ENTITY % bidiDTD SYSTEM "chrome://global/locale/global.dtd">
<!ENTITY % tabbrowserDTD SYSTEM "chrome://global/locale/tabbrowser.dtd" >
<!ENTITY % tabSidebarDTD SYSTEM "chrome://tabsidebar/locale/tabsidebar.dtd" >
%bidiDTD;
%tabbrowserDTD;
%tabSidebarDTD;
]>

<bindings id="TabSidebarBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xhtml="http://www.w3.org/1999/xhtml">

  <binding id="tabpreviews" name="tabpreviews" extends="chrome://tabsidebar/content/widgets/tabpreviews.xml#tabpreviews">

    <resources>
      <stylesheet src="chrome://tabsidebar/content/widgets/tabpreviews.css"/>
    </resources>
    
    <content class="tbs-tabpreviews-vertical" hide="" align="stretch" orient="vertical" style="visibility: hidden">
      <xul:popupset>
      
        <xul:tooltip id="tabpreview_tooltip" orient="vertical" align="left" onpopupshowing="this.parentNode.parentNode.onPreviewTooltipShowing(event);">
          <xul:label class="tbs-tooltip-title" crop="end" value="Title"/>
          <xul:label class="tbs-tooltip-uri" crop="end" value="URI"/>
          <xul:image class="tbs-tooltip-image"/>
          <xhtml:canvas class="tbs-tooltip-canvas"/>
        </xul:tooltip>
        
      </xul:popupset>
        
      <xul:hbox class="tbs-drop-indicator-bar">
        <xul:vbox chromedir="&locale.dir;" class="tbs-drop-indicator"/>
      </xul:hbox>          

      <xul:box class="tbs-focusdetector" style="-moz-user-focus: normal"/>
      
      <xul:hbox flex="1" align="stretch">
        <xul:toolbar class="tbs-scrolltoolbar" orient="vertical">
          <xul:toolbarbutton class="tbs-scrollstart" tooltiptext="&tabsidebar.scrollstart;" oncommand="this.parentNode.parentNode.parentNode.scrollToStart();"/>
          <xul:toolbarbutton class="tbs-scrollleft" flex="1" tooltiptext="&tabsidebar.scrollleft;" oncommand="this.parentNode.parentNode.parentNode.scrollBy(-3);"/>
          <xul:toolbarbutton class="tbs-startoverflow" type="menu">
            <xul:menupopup popupanchor="bottomleft" popupalign="topleft"
                           onpopupshowing="return this.parentNode.parentNode.parentNode.parentNode.showFirstTabs(this);"
                           oncommand="this.parentNode.parentNode.parentNode.parentNode.onPreviewSelect(event.target.tabpreview);"/>
          </xul:toolbarbutton>
        </xul:toolbar>

        <xul:scrollbox class="tbs-scrollbox" allowevents="true" anonid="scrollbox"
                       ondraggesture="nsDragAndDrop.startDrag(event, this.parentNode.parentNode); event.stopPropagation();"
                       ondragover="nsDragAndDrop.dragOver(event, this.parentNode.parentNode); event.stopPropagation();"
                       ondragdrop="nsDragAndDrop.drop(event, this.parentNode.parentNode); event.stopPropagation();"
                       ondragexit="nsDragAndDrop.dragExit(event, this.parentNode.parentNode); event.stopPropagation();"
                       onclick="this.parentNode.parentNode.onClick(event);"
                       ondblclick="this.parentNode.parentNode.onDblClick(event);"
                       align="stretch" flex="1" orient="horizontal">
          
          <children/>
  
        </xul:scrollbox>

        <xul:toolbar class="tbs-scrolltoolbar" orient="vertical">
          <xul:toolbarbutton class="tbs-scrollend" tooltiptext="&tabsidebar.scrollend;" oncommand="this.parentNode.parentNode.parentNode.scrollToEnd();"/>
          <xul:toolbarbutton class="tbs-scrollright" flex="1" tooltiptext="&tabsidebar.scrollright;" oncommand="this.parentNode.parentNode.parentNode.scrollBy(3);"/>
          <xul:toolbarbutton class="tbs-endoverflow" type="menu">
            <xul:menupopup popupanchor="bottomright" popupalign="topright"
                           onpopupshowing="return this.parentNode.parentNode.parentNode.parentNode.showLastTabs(this);"
                           oncommand="this.parentNode.parentNode.parentNode.parentNode.onPreviewSelect(event.target.tabpreview);"/>
          </xul:toolbarbutton>
        </xul:toolbar>
      </xul:hbox>
    </content>
    
    <implementation>

      <field name="previewContainer">this</field>
      <field name="focusDetector">this.ownerDocument.getAnonymousNodes(this)[2]</field>
      <field name="scrollBox">this.ownerDocument.getAnonymousNodes(this)[3].childNodes[1]</field>
      <field name="scrollPanel">this.ownerDocument.getAnonymousNodes(this.scrollBox)[0]</field>
      <field name="scrollBoxObject">this.scrollBox.boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject)</field>
      <field name="dragDropBar">this.ownerDocument.getAnonymousNodes(this)[1]</field>
      <field name="dragDropIndicator">this.dragDropBar.firstChild;</field>
      <field name="scrollStartToolbar">this.ownerDocument.getAnonymousNodes(this)[3].childNodes[0]</field>
      <field name="scrollEndToolbar">this.ownerDocument.getAnonymousNodes(this)[3].childNodes[2]</field>

      <field name="_startScrollDisabled">false</field>
      <field name="_endScrollDisabled">false</field>
      
      <method name="_resizePreview">
        <parameter name="preview"/>
        <body>
        <![CDATA[
          if (this.displayWidth<=0)
          {
#ifdef ${extension.debug}
            this._logWarning("Attempt to resize preview before size has been calculated");
#endif
            return;
          }

          var canvas = preview.canvas;
          canvas.style.height=this.displayHeight+"px";
          canvas.style.minHeight=this.displayHeight+"px";
          canvas.style.maxHeight=this.displayHeight+"px";
          canvas.style.width=this.displayWidth+"px";
          canvas.style.minWidth=this.displayWidth+"px";
          canvas.style.maxWidth=this.displayWidth+"px";
          
          var container = canvas.parentNode.parentNode;
          var mainbox = preview;
          var computed = window.getComputedStyle(container,null);
          var diff = 0;
          while (container != mainbox)
          {
            diff += parseInt(computed.borderLeftWidth);
            diff += parseInt(computed.borderRightWidth);
            diff += parseInt(computed.paddingLeft);
            diff += parseInt(computed.paddingRight);
            container = container.parentNode;
            computed = window.getComputedStyle(container,null);
          }
          diff += parseInt(computed.paddingLeft);
          diff += parseInt(computed.paddingRight);
          container.style.width = (this.displayWidth+diff)+"px";
          
          var offset = (canvas.parentNode.parentNode.boxObject.width-this.displayWidth)/2;
          canvas.setAttribute("left", offset);
          
          preview._invalid=true;          
          try
          {
            canvas.getContext("2d");
          }
          catch (e)
          {
          }
        ]]>
        </body>
      </method>
      
      <method name="ensureElementsAreVisible">
        <parameter name="first"/>
        <parameter name="last"/>
        <body>
        <![CDATA[
          var x = {};
          this.scrollBoxObject.getPosition(x, {});
          var scrollLeft = x.value;
          var scrollWidth = this.scrollBox.boxObject.width;

          var elleft = first.boxObject.x;
          var style = window.getComputedStyle(first,null);
          elleft-=parseInt(style.marginLeft)+parseInt(style.borderLeftWidth);
          elleft-=this.scrollBoxObject.x;
          
          var elright = last.boxObject.x+last.boxObject.width;
          style = window.getComputedStyle(last,null);
          elright+=parseInt(style.marginRight)+parseInt(style.borderRightWidth);
          elright-=this.scrollBoxObject.x;

          if (scrollLeft>elleft)
          {
            this.scrollBoxObject.scrollBy(elleft-scrollLeft, 0);
            this._storeSessionValue("scrollpos", this.getScrollPosition());
          }
          else if ((scrollLeft+scrollWidth)<elright)
          {
            var shift = elright-(scrollLeft+scrollWidth);
            if ((scrollLeft+shift)>elleft)
            {
              shift=elleft-scrollLeft;
            }
            this.scrollBoxObject.scrollBy(shift,0);
            this._storeSessionValue("scrollpos", this.getScrollPosition());
          }
        ]]>
        </body>
      </method>
      
      <method name="_calculateSize">
        <body>
        <![CDATA[
          if (!this.showPreviews)
          {
            this._displayHeight = 0;
            this._displayWidth = 100;
            return true;
          }
          
          var newWidth=0;
          var newHeight=0;

          var container = this._selected.canvas.parentNode.parentNode;
          var computed = window.getComputedStyle(container,null);
          var diff = 0;
          diff += parseInt(computed.borderTopWidth);
          diff += parseInt(computed.borderBottomWidth);
          diff += parseInt(computed.paddingTop);
          diff += parseInt(computed.paddingBottom);

          newHeight = container.boxObject.height - diff

          if (newHeight <= 0)
          {
#ifdef ${extension.debug}
            this._logWarning("Invalid sizes - retrying in a few");
#endif
            return false;
          }
          newWidth = parseInt((this._browserWidth/this._browserHeight)*newHeight);

#ifdef ${extension.debug}
          this._logMessage("New sizes: "+newWidth+"x"+newHeight+" "+this._browserWidth+"x"+this._browserHeight);
#endif
          if (this._displayWidth!=newWidth || this._displayHeight!=newHeight)
          {
            this._displayWidth=newWidth;
            this._displayHeight=newHeight;
            this._saveMetrics();
          }
          return true;
        ]]>
        </body>
      </method>
      
      <method name="_drawDropIndicator">
        <parameter name="drop"/>
        <body>
          if (drop!=this._lastDrop)
          {
            this.ensureElementsAreVisible(drop,drop);
            var x = {};
            this.scrollBoxObject.getPosition(x, {});
            var dropel = drop;
            if (drop.localName == "tabpreview")
            {
              dropel = drop.canvas.parentNode;
            }
            var pos = dropel.boxObject.x+(dropel.boxObject.width/2)-this.boxObject.x;
            pos = pos - x.value - 5;
            this.dragDropIndicator.style.marginLeft = pos + "px";
            if (!this._lastDrop)
            {
              this.dragDropBar.setAttribute("dragging","true");
            }
            this._lastDrop=drop;
          }
        </body>
      </method>
      
      <method name="getDropElement">
        <parameter name="aEvent"/>
        <parameter name="external"/>
        <body>
        <![CDATA[
          var x = {};
          this.scrollBoxObject.getPosition(x, {});
          var xpos = aEvent.clientX+x.value;
          var diff = 0;
          var previews = this.previews;
          for (var i=0; i<previews.length; i++)
          {
            var bo = previews[i].boxObject;
            if (external)
            {
              if (bo.x>xpos)
              {
                return previews[i].previousSibling;
              }
              else if ((bo.x+bo.width)>=xpos)
              {
                return previews[i];
              }
            }
            else
            {
              if ((bo.x+(bo.width/2))>xpos)
              {
                return previews[i].previousSibling;
              }
            }
          }
          return previews[previews.length-1].nextSibling;
        ]]>
        </body>
      </method>
      
      <method name="checkDragScroll">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          var x = {};
          this.scrollBoxObject.getPosition(x, {});

          if (x.value>0 && aEvent.clientX<10)
          {
            this.scrollBoxObject.scrollBy(-20,0);
            this._hideDropIndicator();
            return true;
          }
          
          var right = this.ownerDocument.getAnonymousNodes(this.scrollBox)[0].boxObject.width-this.scrollBox.boxObject.width;
          
          if ((this.scrollBox.boxObject.width-aEvent.clientX)<10 && x.value<right)
          {
            this.scrollBoxObject.scrollBy(20,0);
            this._hideDropIndicator();
            return true;
          }
          
          return false;
        ]]>
        </body>
      </method>
      
      <method name="getScrollPosition">
        <body>
          var value = {};
          this.scrollBoxObject.getPosition(value, {});
          return value.value;
        </body>
      </method>
      
      <method name="scrollTo">
        <parameter name="position"/>
        <body>
          this.scrollBoxObject.scrollTo(position, 0);
          this._storeSessionValue("scrollpos", position);
        </body>
      </method>
      
      <method name="scrollBy">
        <parameter name="distance"/>
        <body>
          this.scrollBoxObject.scrollBy(distance*15, 0);
          this._storeSessionValue("scrollpos", this.getScrollPosition());
        </body>
      </method>
      
      <method name="scrollToStart">
        <body>
          this.scrollTo(0);
        </body>
      </method>
      
      <method name="scrollToEnd">
        <body>
        	this.scrollTo(this.scrollBoxObject.width);
        </body>
      </method>
      
      <method name="_checkScrollPosition">
        <body>
        <![CDATA[
          var x = {};
          this.scrollBoxObject.getPosition(x, {});
          var end = x.value+this.scrollBoxObject.width;
          if (this.scrollPanel.boxObject.width<=this.scrollBoxObject.width)
            this.scrollToStart();
          else if (end>this.scrollPanel.boxObject.width)
            this.scrollToEnd();
        ]]>
        </body>
      </method>
      
      <method name="_updateScrollButtons">
        <body>
        <![CDATA[
          var x = {};
          this.scrollBoxObject.getPosition(x, {});
          var state = (x.value <= 0);
          if (state != this._startScrollDisabled)
          {
            var button = this.scrollStartToolbar.firstChild;
            while (button)
            {
              button.disabled = state;
              button = button.nextSibling;
            }
            this._startScrollDisabled = state;
          }

          var width = this.scrollPanel.boxObject.width;
          state = ((x.value+this.scrollBoxObject.width) >= width);
          if (state != this._endScrollDisabled)
          {
            button = this.scrollEndToolbar.firstChild;
            while (button)
            {
              button.disabled = state;
              button = button.nextSibling;
            }
            this._endScrollDisabled = state;
          }
        ]]>
        </body>
      </method>
      
      <method name="showFirstTabs">
        <parameter name="menupopup"/>
        <body>
        <![CDATA[
          while (menupopup.firstChild)
            menupopup.removeChild(menupopup.firstChild);

          var x = {};
          this.scrollBoxObject.getPosition(x, {});
          var node = this.firstChild;
          while ((node.boxObject.x-this.scrollBoxObject.x)<x.value)
          {
            if (node.localName == "tabpreview")
            {
              var item = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
              item.setAttribute("label", node.title);
              item.setAttribute("class", "menuitem-iconic");
              if (node.faviconIcon.src != null)
                item.setAttribute("image", node.faviconIcon.src);
              menupopup.appendChild(item);
              item.tabpreview = node;
            }
            node = node.nextSibling;
          }
          return (menupopup.firstChild != null);
        ]]>
        </body>
      </method>
      
      <method name="showLastTabs">
        <parameter name="menupopup"/>
        <body>
          while (menupopup.firstChild)
            menupopup.removeChild(menupopup.firstChild);

          var x = {};
          this.scrollBoxObject.getPosition(x, {});
          x.value+=this.scrollBoxObject.width;
          var node = this.lastChild;
          while ((node.boxObject.x-this.scrollBoxObject.x+node.boxObject.width)>x.value)
          {
            if (node.localName == "tabpreview")
            {
              var item = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
              item.setAttribute("label", node.title);
              item.setAttribute("class", "menuitem-iconic");
              if (node.faviconIcon.src != null)
                item.setAttribute("image", node.faviconIcon.src);
              menupopup.insertBefore(item,menupopup.firstChild);
              item.tabpreview = node;
            }
            node = node.previousSibling;
          }
          return (menupopup.firstChild != null);
        </body>
      </method>
      
    </implementation>
    
    <handlers>
      <handler event="keypress">
      <![CDATA[
        if (event.target.parentNode==this)
        {
          var preview = event.target;
          if (event.altKey||event.shiftKey||event.metaKey)
          {
            return;
          }
          else if (event.ctrlKey)
          {
            if (event.keyCode==event.DOM_VK_LEFT)
            {
              var newpreview = preview.previousSibling.previousSibling;
              if (newpreview)
              {
                this.movePreview(preview,newpreview);
              }
              event.preventDefault();
            }
            else if (event.keyCode==event.DOM_VK_RIGHT)
            {
              var newpreview = preview.nextSibling.nextSibling;
              if (newpreview)
              {
                this.movePreview(preview,newpreview.nextSibling.nextSibling);
              }
              event.preventDefault();
            }
          }
          else
          {
            if (event.keyCode==event.DOM_VK_LEFT)
            {
              var newpreview = preview.previousSibling.previousSibling;
              if (newpreview)
              {
                preview.tab.focus();
                this.tabbrowser.selectedTab=newpreview.tab;
                newpreview.setfocus();
              }
              event.preventDefault();
            }
            else if (event.keyCode==event.DOM_VK_RIGHT)
            {
              var newpreview = preview.nextSibling.nextSibling;
              if (newpreview)
              {
                preview.tab.focus();
                this.tabbrowser.selectedTab=newpreview.tab;
                newpreview.setfocus();
              }
              event.preventDefault();
            }
            else if (event.keyCode==event.DOM_VK_CONTEXT_MENU)
            {
              var preview = null;

              if (this._selected)
              {
                preview=this._selected;
              }
              else
              {
                preview=this.previews[0];
              }

              var x = preview.boxObject.screenX-this.window.document.documentElement.boxObject.screenX;
              var y = preview.boxObject.screenY-this.window.document.documentElement.boxObject.screenY;
    
              x+=2;
              y+=2;
              
              this.displayContextMenu(preview,x,y);
            }
          }
        }
      ]]>
      </handler>
    </handlers>
  </binding>
</bindings>
