<?xml version="1.0"?>

 <!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Tab Sidebar Display.
   -
   - The Initial Developer of the Original Code is
   -     Dave Townsend <dave.townsend@blueprintit.co.uk>.
   - Portions created by the Initial Developer are Copyright (C) 2006
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
   -
   - $HeadURL$
   - $LastChangedBy$
   - $Date$
   - $Revision$
   -->

<!DOCTYPE bindings [
<!ENTITY % bidiDTD SYSTEM "chrome://global/locale/global.dtd">
<!ENTITY % tabbrowserDTD SYSTEM "chrome://global/locale/tabbrowser.dtd" >
<!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd" >
<!ENTITY % tabSidebarDTD SYSTEM "chrome://tabsidebar/locale/tabsidebar.dtd" >
%bidiDTD;
%tabbrowserDTD;
%browserDTD;
%tabSidebarDTD;
]>

<bindings id="TabSidebarBindings2"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xhtml="http://www.w3.org/1999/xhtml">

  <binding id="tabpreview" name="tabpreview">

    <resources>
      <stylesheet src="chrome://tabsidebar/content/widgets/tabpreviews.css"/>
      <stylesheet src="chrome://tabsidebar-platform/content/widgets/tabpreviews.css"/>
    </resources>
    
    <content class="tbs-tabpreview" orient="vertical" align="stretch" loading="false" security="none">
    	<xul:stack flex="1">
    		<xul:vbox>
	    		<xul:hbox flex="1000" align="stretch" style="max-height: 75px">
			      <xul:box class="tbs-top-left"/>
		      	<xul:box flex="1" class="tbs-top-middle"/>
			      <xul:box class="tbs-top-right"/>
	    		</xul:hbox>
      		<xul:hbox flex="1" align="stretch">
		     	 	<xul:box class="tbs-middle-left"/>
		     	 	<xul:box flex="1" class="tbs-middle-middle"/>
		      	<xul:box class="tbs-middle-right"/>
      		</xul:hbox>
		     	<xul:hbox flex="1000" align="stretch" style="max-height: 75px">
		     	 	<xul:box class="tbs-bottom-left"/>
		     	 	<xul:box flex="1" class="tbs-bottom-middle"/>
		      	<xul:box class="tbs-bottom-right"/>
		      </xul:hbox>
	    	</xul:vbox>
	    	<xul:vbox flex="1">
		      <xul:hbox class="tbs-topbox" align="center">
		        <xul:hbox flex="1" align="center">
		          <xul:image class="tbs-favicon" validate="never" tooltip="tabpreview_tooltip" onerror="this.src=null;"/>
		          <xul:image class="tbs-loading" tooltip="tabpreview_tooltip"/>
		          <xul:label class="tbs-title" tooltip="tabpreview_tooltip" flex="1" crop="end"/>
		        </xul:hbox>
		        <xul:toolbarbutton class="tbs-close tbs-icon" tooltiptext="&closeTab.label;"
		                           oncommand="this.preview.close()"/>
		      </xul:hbox>
		      <xul:stack flex="1" class="tbs-stack">
		        <xul:vbox pack="center" align="center" tooltip="tabpreview_tooltip" flex="1" class="tbs-container">
		          <xul:box>
		            <xhtml:canvas class="tbs-canvas" tooltip="tabpreview_tooltip"/>
		          </xul:box>
		        </xul:vbox>
		        <xul:vbox class="tbs-toolbar" style="overflow: hidden">
		          <xul:hbox pack="end" class="tbs-topstrip">
		            <xul:toolbarbutton class="tbs-security tbs-icon"
		                               oncommand="this.preview.viewSecurity()"/>
		          </xul:hbox>
		          <xul:box tooltip="tabpreview_tooltip" flex="1"/>
		          <xul:hbox pack="start" class="tbs-bottomstrip">
		            <xul:toolbarbutton class="tbs-stop tbs-icon" disabled="true" tooltiptext="&stopButton.tooltip;"
		                               oncommand="this.preview.stop()"/>
		            <xul:spacer flex="1"/>
		            <xul:toolbarbutton chromedir="&locale.dir;" type="menu-button" class="tbs-back tbs-icon" disabled="true" tooltiptext="&backButton.tooltip;"
		                               onclick="this.preview.checkMiddleClick(this,event);"
		                               oncommand="this.preview.goBack(event)">
		              <xul:menupopup onpopupshowing="this.parentNode.preview.populateBackMenu(event);"
		                             oncommand="this.parentNode.preview.gotoHistoryIndex(event); event.stopPropagation()"
		                             onclick="this.parentNode.preview.checkMiddleClick(this,event);" tooltiptext=""/>
		            </xul:toolbarbutton>
		            <xul:spacer flex="1"/>
		            <xul:toolbarbutton chromedir="&locale.dir;" type="menu-button" class="tbs-forward tbs-icon" disabled="true" tooltiptext="&forwardButton.tooltip;"
		                               onclick="this.preview.checkMiddleClick(this,event);"
		                               oncommand="this.preview.goForward(event)">
		              <xul:menupopup onpopupshowing="this.parentNode.preview.populateForwardMenu(event);"
		                             oncommand="this.parentNode.preview.gotoHistoryIndex(event); event.stopPropagation()"
		                             onclick="this.parentNode.preview.checkMiddleClick(this,event);" tooltiptext=""/>
		            </xul:toolbarbutton>
		            <xul:spacer flex="1"/>
		            <xul:toolbarbutton class="tbs-reload tbs-icon" tooltiptext="&reloadButton.tooltip;"
		                               oncommand="this.preview.reload(event)"/>
		          </xul:hbox>
		        </xul:vbox>
		      </xul:stack>
		    </xul:vbox>
	    </xul:stack>
    </content>

    <implementation implements="nsIWebProgressListener,nsISHistoryListener,nsITimerCallback">

      <constructor>
      </constructor>

      <method name="init">
        <body>
          // Set up shortcuts;
          this.closeButton.preview = this;
          this.securityIcon.preview = this;
          this.stopButton.preview = this;
          this.backButton.preview = this;
          this.forwardButton.preview = this;
          this.reloadButton.preview = this;
          
          if (this.previews.displayHeight>0)
            this.previews._resizePreview(this);
        </body>
      </method>
      
      <destructor>
#ifdef ${extension.debug}
        dump("Tabpreview destructor\n");
#endif
        this._destroy();
      </destructor>
      
      <field name="_destroyed" value="false"/>
      <method name="_destroy">
        <body>
          if (!this._destroyed)
          {
            try
            {
              this._destroyed=true;
              
              this._emptyDocumentListeners();
              if (this._browser)
              {
                this._removeListeners();
                this._browser = null;
              }
  
              //this.loading = false;
  
              this._changeTimer.cancel();
              this._changeTime = 0;
              this._changeReason = 0;
              this._changeTimer = null;
              this._updateTimer.cancel();
              this._updateTimer = null;
              
              this._timerListener.tabpreview = null;
              this._timerListener=null;
              
              this._eventListener.tabpreview = null;
              this._eventListener = null;
              this._progressListener.tabpreview = null;
              this._progressListener = null;
              
#ifdef ${extension.debug}
              //dump("Tabpreview destroyed\n");
#endif
            }
            catch (e)
            {
#ifdef ${extension.debug}
              dump(e+"\n");
#endif
            }
          }
        </body>
      </method>
      
      <!-- Quick access to anonymous nodes -->
      
      <field name="_anonymousNodes">this.ownerDocument.getAnonymousNodes(this)[0].childNodes[1].childNodes;</field>
      
      <field name="_topbox">
        this._anonymousNodes[0].firstChild;
      </field>
      
      <field name="titleField">
        this._topbox.childNodes[2];
      </field>
      
      <field name="faviconIcon">
        this._topbox.firstChild;
      </field>
      
      <field name="closeButton">
        this._topbox.nextSibling;
      </field>
      
      <field name="_stack">
        this._anonymousNodes[1]
      </field>
      
      <field name="reloadButton">
        this._stack.lastChild.lastChild.lastChild;
      </field>
      
      <field name="stopButton">
        this._stack.lastChild.lastChild.firstChild;
      </field>
      
      <field name="backButton">
        this.stopButton.nextSibling.nextSibling;
      </field>
      
      <field name="forwardButton">
        this.backButton.nextSibling.nextSibling;
      </field>
      
      <field name="securityIcon">
        this._stack.lastChild.firstChild.lastChild;
      </field>
      
      <field name="canvas">
        this._stack.firstChild.firstChild.firstChild;
      </field>
      
#include "previewevents.inc.xml"
#include "previewprogress.inc.xml"
      
      <!-- Internal fields and methods -->
      
      <field name="_invalid">false</field>

#ifdef ${extension.debug}
      <method name="_logMessage">
        <parameter name="message"/>
        <body>
        <![CDATA[
          if (this.previews && this.previews._enableLogging)
          {
            Components.classes['@mozilla.org/consoleservice;1']
                      .getService(Components.interfaces.nsIConsoleService)
                      .logStringMessage("Tab Preview: "+message);
          }
        ]]>
        </body>
      </method>
      
      <method name="_logWarning">
        <parameter name="message"/>
        <body>
        <![CDATA[
          if (this.previews && this.previews._enableLogging)
          {
            var msg = Components.classes["@mozilla.org/scripterror;1"].createInstance(Components.interfaces.nsIScriptError);
            
            msg.init("Tab Preview: "+message,
                     "chrome://tabsidebar/content/widgets/tabpreview.xml",
                     "",
                     0,
                     0,
                     Components.interfaces.nsIScriptError.warningFlag,
                     "XUL JavaScript");
            
            var console = Components.classes["@mozilla.org/consoleservice;1"]
                                    .getService(Components.interfaces.nsIConsoleService);
            console.logMessage(msg);
          }
        ]]>
        </body>
      </method>
      
      <method name="_logError">
        <parameter name="message"/>
        <body>
        <![CDATA[
          if (this.previews && this.previews._enableLogging)
          {
            var msg = Components.classes["@mozilla.org/scripterror;1"].createInstance(Components.interfaces.nsIScriptError);
            
            msg.init("Tab Preview: "+message,
                     "chrome://tabsidebar/content/widgets/tabpreview.xml",
                     "",
                     0,
                     0,
                     Components.interfaces.nsIScriptError.errorFlag,
                     "XUL JavaScript");
            
            var console = Components.classes["@mozilla.org/consoleservice;1"]
                                    .getService(Components.interfaces.nsIConsoleService);
            console.logMessage(msg);
          }
        ]]>
        </body>
      </method>

#endif
      <field name="_browserWidth">-1</field>
      <field name="_browserHeight">-1</field>
      
      <field name="_browser"></field>
      <property name="browser">
        <getter>
          return this._browser;
        </getter>
        <setter>
        <![CDATA[
          if (this._browser)
          {
            this._removeListeners();
            this._emptyDocumentListeners();
          }
          this._browser=val;
          if (val)
          {
            var tab = this.tab;
            if (tab && tab.getAttribute("busy") == "true")
            {
              this._loadStarted();
            }
            else
            {
              this.loading=false;
            }

            if (this._browser.docShell)
            {
              if (this._browser.securityUI)
              {
                this._setSecurity(this._browser.securityUI.state);
              }
              var newdocs = [];
              this._findDocuments(this._browser.contentDocument, newdocs);
              for (var i=0; i<newdocs.length; i++)
                this._addDocumentListeners(newdocs[i]);
            }
            this._addListeners();
            
#ifdef ${extension.debug}
            this._logMessage("Browser added");
#endif
            this._browserResized();
            this.update();
          }
        ]]>
        </setter>
      </property>

      <!-- Helper properties -->
      
      <property name="showPreview">
        <getter>
          return this.previews.showPreviews;
        </getter>
      </property>
      
      <property name="previews">
        <getter>
          return this.parentNode;
        </getter>
      </property>
      
      <property name="tab">
        <getter>
          return this.previews.getTabForPreview(this);
        </getter>
      </property>
      
      <!-- Attribute based properties -->
      
      <property name="loading">
        <getter>
        <![CDATA[
          return this.hasAttribute("loading") && (this.getAttribute("loading")=="true");
        ]]>
        </getter>
        <setter>
        <![CDATA[
          if (!val)
          {
            this.setAttribute("loading","false");
          }
          else
          {
            this.setAttribute("loading","true");
          }
          return val;
        ]]>
        </setter>
      </property>
      
      <property name="selected">
        <getter>
        <![CDATA[
          return this.hasAttribute("checked") && (this.getAttribute("checked")=="true");
        ]]>
        </getter>
        <setter>
        <![CDATA[
          if (!val)
          {
            this.setAttribute("selected","false");
            this.setAttribute("checked","false");
          }
          else
          {
            this.setAttribute("selected","true");
            this.setAttribute("checked","true");
          }
          return val;
        ]]>
        </setter>
      </property>
      
      <!-- Properties generated from the browser -->
      
      <property name="title">
        <getter>
          if ((!this._browser)||(!this._browser.docShell))
            return "";

          var title = this._browser.contentTitle;
          if (title &amp;&amp; title.length&gt;0)
          {
            return title;
          }
          else
          {
            return "&untitledTab;";
          }
        </getter>
      </property>

      <property name="uri">
        <getter>
          if ((!this._browser)||(!this._browser.docShell))
            return "";

          var uri = this._browser.currentURI;
          if (uri)
          {
            return uri.spec;
          }
          else
          {
            return "";
          }
        </getter>
      </property>

      <property name="icon">
        <getter>
        <![CDATA[
          if (!this._browser)
            return null;

          return this._browser.mIconURL;
        ]]>
        </getter>
      </property>

      <!-- Methods -->
      
      <method name="checkMiddleClick">
        <parameter name="node"/>
        <parameter name="event"/>
        <body>
        <![CDATA[
          if (event.button == 1)
          {
            var func = new Function("event",node.getAttribute("oncommand"));
            func.call(node,event);
            while (node && (node.localName != "menupopup") && (node.localName != "popup"))
              node = node.parentNode;
            if (node)
              node.hidePopup();
            event.stopPropagation();
          }
        ]]>
        </body>
      </method>
      
      <method name="reload">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ((!this._browser)||(!this._browser.docShell))
            return;

          if (event && event.shiftKey)
          {
            var reloadFlags = Components.interfaces.nsIWebNavigation.LOAD_FLAGS_BYPASS_PROXY | 
                              Components.interfaces.nsIWebNavigation.LOAD_FLAGS_BYPASS_CACHE;
            this._browser.reloadWithFlags(reloadFlags);
          }
          else
          {
            this._browser.reload();
          }
        ]]>
        </body>
      </method>

      <method name="stop">
        <body>
        <![CDATA[
          if ((this._browser)&&(this._browser.docShell))
            this._browser.stop();
        ]]>
        </body>
      </method>

#include "previewhistory.inc.xml"

      <method name="viewSecurity">
        <body>
          var tabbrowser = this.previews.tabbrowser;
          if (tabbrowser.selectedTab!=this.tab)
          {
            tabbrowser.selectedTab=this.tab;
          }
          
          this.previews.window.setTimeout(this.previews.window.displaySecurityInfo,10);
        </body>
      </method>

      <method name="close">
        <body>
          this.previews.tabbrowser.removeTab(this.tab);
        </body>
      </method>

      <method name="update">
        <body>
          this.onLocationChange();

          this.onLinkIconAvailable();

          this.onTitleChange();
        </body>
      </method>
      
      <method name="redraw">
        <body>
        <![CDATA[
          if ((!this.previews)||(!this._invalid)||(!this.showPreview))
            return;
          
          if (this.previews.displayHeight==0)
          {
#ifdef ${extension.debug}
            this._logWarning("Sizes not yet worked out - cancelling redraw");
#endif
            return;
          }
          
          var canvas = this.canvas;
          if (!canvas)
          {
#ifdef ${extension.debug}
            this._logError("Canvas doesnt exist.");
#endif
            return;
          }
          if (!canvas.hasAttribute("style"))
          {
#ifdef ${extension.debug}
            this._logWarning("Attempt to redraw before resize");
#endif
            return;
          }
          
          this._invalid = false;
#ifdef ${extension.debug}
          this._logMessage("redraw");
#endif
          canvas.width = this.previews.contentWidth;
          canvas.height = this.previews.contentHeight;
          var ctx = null;
          try
          {
            ctx = canvas.getContext("2d");
          }
          catch (e)
          {
#ifdef ${extension.debug}
            dump(e+"\n");
#endif
            return;
          }
          if ((this._browser)&&(this._browser.docShell))
          {
            var win = this._browser.contentWindow;
            var width = this._browserWidth;
            var scaling = this.previews.contentWidth/width;
            var height = Math.round(this.previews.contentHeight/scaling);
            ctx.save();
            ctx.scale(scaling,this.previews.contentHeight/height);
            try
            {
              var top = 0;
              var left = 0;
              if (this.previews.drawScrolled)
              {
                top=win.scrollY;
                left=win.scrollX;
              }
              ctx.drawWindow(win,left,top,width,height,"rgba(255,255,255,255)");
            }
            catch (e)
            {
#ifdef ${extension.debug}
              dump(e+"\n");
              dump(win+" "+width+"x"+height+"\n");
#endif
            }
            ctx.restore();
          }
          else
          {
            ctx.clearRect(0, 0, this.previews.contentWidth, this.previews.contentHeight);
          }
        ]]>
        </body>
      </method>
      
      <method name="dispatchCloneMouseEvent">
      	<parameter name="event"/>
      	<body>
      		var target = this.tab;
	    		var ev = this.previews.tabbrowser.ownerDocument.createEvent("MouseEvent");
	    		ev.initMouseEvent(event.type, true, true, this.previews.window,
	    		                  event.detail, event.screenX, event.screenY, event.clientX, event.clientY,
	    		                  event.ctrlKey, event.altKey, event.shiftKey, event.metaKey, event.button, null);
	    		target.dispatchEvent(ev);
      	</body>
      </method>
      
      <method name="isToolbarButtonEvent">
      	<parameter name="event"/>
      	<body>
      	<![CDATA[
      		var node = event.originalTarget;
      		while (node && (node.localName != "tabpreview") && (node.localName != "toolbarbutton"))
      			node = node.parentNode;
      		
      		return node && node.localName == "toolbarbutton";
      	]]>
      	</body>
      </method>
      
    </implementation>

    <handlers>
    	<handler event="mouseover">
    		this.dispatchCloneMouseEvent(event);
    	</handler>
    	
    	<handler event="mouseout">
    		this.dispatchCloneMouseEvent(event);
    	</handler>
    	
      <handler event="mousedown">
      <![CDATA[
      	if (this.isToolbarButtonEvent(event))
      		return;
      		
        if (event.button==0)
        {
	        var tabbrowser = this.previews.tabbrowser;
          if (tabbrowser.selectedTab != this.tab)
          {
            var focus = false;
            if (document.commandDispatcher.focusedElement && document.commandDispatcher.focusedElement.parentNode==this.parentNode)
            {
              focus=true;
              this.tab.focus();
            }
            tabbrowser.selectedTab=this.tab;
            if (focus)
              this.focus();
          }
          else
            this.focus();
        }
        else
        	this.dispatchCloneMouseEvent(event);
      ]]>
      </handler>
    	
      <handler event="mouseup">
      	if (this.isToolbarButtonEvent(event))
      		return;
      		
	   		this.dispatchCloneMouseEvent(event);
      </handler>
    	
      <handler event="click">
      	if (this.isToolbarButtonEvent(event))
      		return;
      		
    		this.dispatchCloneMouseEvent(event);
      </handler>
    	
      <handler event="dblclick">
      	if (this.isToolbarButtonEvent(event))
      		return;
      		
    		this.dispatchCloneMouseEvent(event);
      </handler>
    </handlers>
      
  </binding>

</bindings>
