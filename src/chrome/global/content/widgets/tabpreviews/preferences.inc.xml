      <method name="_initSettings">
        <body>
#ifdef ${extension.debug}
          try
          {
            this._enableLogging = this.preferences.getBoolPref("enablelogging");
          }
          catch (e)
          {
          }

#endif
          this._showNavigation = this.preferences.getBoolPref("content.navigation");
          this._showPreviews = this.preferences.getBoolPref("content.previews");
          this._updatePreviews = this.preferences.getBoolPref("updatepreviews");
          this._scrollSelects = this.preferences.getBoolPref("scrollselects");

          this._drawScrolled = this.preferences.getBoolPref("drawscrolled");
          this._validateRate = this.preferences.getIntPref("validaterate");
          this._loadRefresh = this.preferences.getBoolPref("loadrefresh");
          this._loadRefreshRate = this.preferences.getIntPref("loadrefreshrate");
          this._loadErrorDelay = this.preferences.getIntPref("loaderrordelay");
          this._unselectedLoadErrorDelay = this.preferences.getIntPref("unselectedloaderrordelay");
          this._loadDelay = this.preferences.getIntPref("loaddelay");
          this._unselectedLoadDelay = this.preferences.getIntPref("unselectedloaddelay");
          this._textDelay = this.preferences.getIntPref("textdelay");
          this._unselectedTextDelay = this.preferences.getIntPref("unselectedtextdelay");
          this._changeDelay = this.preferences.getIntPref("changedelay");
          this._unselectedChangeDelay = this.preferences.getIntPref("unselectedchangedelay");
          this._scrollDelay = this.preferences.getIntPref("scrolldelay");
          this._unselectedScrollDelay = this.preferences.getIntPref("unselectedscrolldelay");

          this.preferences.addObserver("", this, false);
          
          this.updateDisplay();
        </body>
      </method>
      
      <!-- Configuration options -->

#ifdef ${extension.debug}
      <field name="_enableLogging">false</field>
      <property name="enableLogging" onget="return this._enableLogging;"/>
      
#endif
      <field name="_scrollSelects">false</field>
      <property name="scrollSelects" onget="return this._scrollSelects;"/>
      
      <field name="_showPreviews">false</field>
      <property name="showPreviews" onget="return this._showPreviews;"/>
      
      <field name="_updatePreviews">false</field>
      <property name="updatePreviews" onget="return (this._updatePreviews &amp;&amp; this._showPreviews);"/>
      
      <field name="_showNavigation">false</field>
      <property name="showNavigation" onget="return this._showNavigation;"/>
      
      <field name="_displayWidth">-1</field>
      <property name="displayWidth" onget="return this._displayWidth;"/>
      
      <field name="_displayHeight">-1</field>
      <property name="displayHeight" onget="return this._displayHeight;"/>
      
      <field name="_contentWidth">-1</field>
      <property name="contentWidth" onget="return this._contentWidth;"/>
      
      <field name="_contentHeight">-1</field>
      <property name="contentHeight" onget="return this._contentHeight;"/>
      
      <field name="_loadRefresh"/>
      <property name="loadRefresh" onget="return (this._loadRefresh &amp;&amp; this.updatePreviews);"/>
      
      <field name="_loadRefreshRate"/>
      <property name="loadRefreshRate">
        <getter>
          return Math.max(100,this._loadRefreshRate);
        </getter>
      </property>
      
      <field name="_loadErrorDelay"/>
      <property name="loadErrorDelay" onget="return this._loadErrorDelay;"/>
      
      <field name="_unselectedLoadErrorDelay"/>
      <property name="unselectedLoadErrorDelay" onget="return this._unselectedLoadErrorDelay;"/>
      
      <field name="_loadDelay"/>
      <property name="loadDelay" onget="return this._loadDelay;"/>
      
      <field name="_unselectedLoadDelay"/>
      <property name="unselectedLoadDelay" onget="return this._unselectedLoadDelay;"/>
      
      <field name="_changeDelay"/>
      <property name="changeDelay" onget="return this._changeDelay;"/>
      
      <field name="_unselectedChangeDelay"/>
      <property name="unselectedChangeDelay" onget="return this._unselectedChangeDelay;"/>
      
      <field name="_textDelay"/>
      <property name="textDelay" onget="return this._textDelay;"/>
      
      <field name="_unselectedTextDelay"/>
      <property name="unselectedTextDelay" onget="return this._unselectedTextDelay;"/>
      
      <field name="_scrollDelay"/>
      <property name="scrollDelay" onget="return this._scrollDelay;"/>
      
      <field name="_unselectedScrollDelay"/>
      <property name="unselectedScrollDelay" onget="return this._unselectedScrollDelay;"/>
      
      <field name="_drawScrolled"/>
      <property name="drawScrolled" onget="return this._drawScrolled;"/>

      <!-- Start of nsIObserver implementation -->

      <method name="observe">
        <parameter name="subject"/>
        <parameter name="topic"/>
        <parameter name="data"/>
        <body>
        <![CDATA[
          switch (data)
          {
            case "content.navigation":
              this._showNavigation = this.preferences.getBoolPref(data);
              this.updateDisplay();
              break;
            case "content.previews":
              this._showPreviews = this.preferences.getBoolPref(data);
              for (var i = 0; i < this.previews.length; i++)
              {
                this.previews[i].updateDisplay();
                if (this.previews[i].showPreview && this.updatePreviews)
                  this.previews[i]._checkDocuments("");
                else
                  this.previews[i]._emptyDocumentListeners();
              }
              if (this._showPreviews)
              {
                this._browserWidth = this._selected._browserWidth;
                this._browserHeight = this._selected._browserHeight;
                this._reflowComplete = false;
                this._checkReflow();
              }
              break;
            case "updatepreviews":
              this._updatePreviews = this.preferences.getBoolPref(data);
              if (this.showPreviews)
              {
                for (var i = 0; i < this.previews.length; i++)
                {
                  if (this.previews[i].showPreview && this.updatePreviews)
                    this.previews[i]._checkDocuments("");
                  else
                    this.previews[i]._emptyDocumentListeners();
                }
              }
              break;
            case "scrollselects":
              this._scrollSelects = this.preferences.getBoolPref(data);
              break;
            case "drawscrolled":
              this._drawScrolled = this.preferences.getBoolPref(data);
              this._invalidateAll();
              break;
#ifdef ${extension.debug}
            case "enablelogging":
              this._enableLogging = this.preferences.getBoolPref(data);
              break;
#endif
            case "validaterate":
              this._validateRate = this.preferences.getIntPref(data);
              break;
            case "loadrefresh":
              this._loadRefresh = this.preferences.getBoolPref(data);
              break;
            case "loadrefreshrate":
              this._loadRefreshRate = this.preferences.getIntPref(data);
              break;
            case "loaderrordelay":
              this._loadErrorDelay = this.preferences.getIntPref(data);
              break;
            case "unselectedloaderrordelay":
              this._unselectedLoadErrorDelay = this.preferences.getIntPref(data);
              break;
            case "loaddelay":
              this._loadDelay = this.preferences.getIntPref(data);
              break;
            case "unselectedloaddelay":
              this._unselectedLoadDelay = this.preferences.getIntPref(data);
              break;
            case "scrolldelay":
              this._scrollDelay = this.preferences.getIntPref(data);
              break;
            case "unselectedscrolldelay":
              this._unselectedScrollDelay = this.preferences.getIntPref(data);
              break;
            case "textdelay":
              this._textDelay = this.preferences.getIntPref(data);
              break;
            case "unselectedtextdelay":
              this._unselectedTextDelay = this.preferences.getIntPref(data);
              break;
            case "changedelay":
              this._changeDelay = this.preferences.getIntPref(data);
              break;
            case "unselectedchangedelay":
              this._unselectedChangeDelay = this.preferences.getIntPref(data);
              break;
          }
        ]]>
        </body>
      </method>
