      <method name="gotoHistoryIndex">
        <parameter name="event"/>
        <body>
          var index = event.target.getAttribute("index");
          if (!index)
            return false;

          var where = whereToOpenLink(event);

          if (where == "current") {
            // Normal click.  Go there in the current tab and update session history.
            this._browser.gotoIndex(index);
            return true;
          }
          else {
            // Modified click.  Go there in a new tab/window.
            // This code doesn't copy history or work well with framed pages.

            var sessionHistory = this._browser.sessionHistory;
            var entry = sessionHistory.getEntryAtIndex(index, false);
            var url = entry.URI.spec;
            openUILinkIn(url, where);
            return true;
          }
        </body>
      </method>
      
      <method name="goBack">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ((!this._browser)||(!this._browser.docShell))
            return;

          if (event)
          {
            var where = whereToOpenLink(event, false, false);
            if (where == "current")
            {
              this._browser.goBack();
            }
            else
            {
              var sessionHistory = this._browser.sessionHistory;
              var currentIndex = sessionHistory.index;
              var entry = sessionHistory.getEntryAtIndex(currentIndex - 1, false);
              var url = entry.URI.spec;
              openUILinkIn(url, where);
            }
          }
          else
          {
            this._browser.goBack();
          }
        ]]>
        </body>
      </method>
      
      <method name="populateBackMenu">
        <parameter name="event"/>
        <body>
        <![CDATA[
          var menu = event.target;
          
          while (menu.firstChild)
            menu.removeChild(menu.firstChild);

          if ((this._browser)&&(this._browser.docShell))
          {
            var sessionHistory = this._browser.sessionHistory;
  
            var index = sessionHistory.index;
            var entry;
  
            var end = (index > 8) ? index - 8 : 0;
            if ((index - 1) < end) return false;
            for (var pos = index - 1; pos >= end; pos--)
            {
              entry = sessionHistory.getEntryAtIndex(pos, false);
              if (entry)
              {
                var menuitem = document.createElement("menuitem");
                menuitem.setAttribute("label", entry.title);
                menuitem.setAttribute("tooltiptext", entry.title);
                menuitem.setAttribute("index", pos);
                menuitem.setAttribute("class", "menuitem-iconic");
                menu.appendChild(menuitem);
              }
            }
          }
          return true;
        ]]>
        </body>
      </method>

      <method name="goForward">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ((!this._browser)||(!this._browser.docShell))
            return;

          if (event)
          {
            var where = whereToOpenLink(event, false, false);
            if (where == "current")
            {
              this._browser.goForward();
            }
            else
            {
              var sessionHistory = this._browser.sessionHistory;
              var currentIndex = sessionHistory.index;
              var entry = sessionHistory.getEntryAtIndex(currentIndex + 1, false);
              var url = entry.URI.spec;
              openUILinkIn(url, where);
            }
          }
          else
          {
            this._browser.goForward();
          }
        ]]>
        </body>
      </method>

      <method name="populateForwardMenu">
        <parameter name="event"/>
        <body>
        <![CDATA[
          var menu = event.target;
          
          while (menu.firstChild)
            menu.removeChild(menu.firstChild);

          if ((this._browser)&&(this._browser.docShell))
          {
            var sessionHistory = this._browser.sessionHistory;
  
            var index = sessionHistory.index;
            var count = sessionHistory.count;
            var entry;
  
            var end  = ((count-index) > 8) ? index + 8 : count - 1;
            if ((index + 1) > end) return false;
            for (var pos = index + 1; pos <= end; pos++)
            {
              entry = sessionHistory.getEntryAtIndex(pos, false);
              if (entry)
              {
                var menuitem = document.createElement("menuitem");
                menuitem.setAttribute("label", entry.title);
                menuitem.setAttribute("tooltiptext", entry.title);
                menuitem.setAttribute("index", pos);
                menuitem.setAttribute("class", "menuitem-iconic");
                menu.appendChild(menuitem);
              }
            }
          }
          return true;
        ]]>
        </body>
      </method>

      <method name="historyChange">
        <body>
        <![CDATA[
          if ((this._browser)&&(this._browser.docShell))
          {
            var session = this._browser.sessionHistory;
            if (session)
            {
              this.backButton.disabled=(session.index<=0);
              this.forwardButton.disabled=((session.index+1)==session.count);
            }
          }
          else
          {
            this.backButton.disabled=true;
            this.forwardButton.disabled=true;
          }
        ]]>
        </body>
      </method>
      
