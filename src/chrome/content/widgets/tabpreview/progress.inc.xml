# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Tab Sidebar Display.
#
# The Initial Developer of the Original Code is
#      Dave Townsend <dtownsend@oxymoronical.com>.
#
# Portions created by the Initial Developer are Copyright (C) 2007
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
      <field name="_updateTimer">
        Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
      </field>

      <field name="_progressListener">
      ({
        tabpreview: this,

        onProgressChange : function (aWebProgress, aRequest,
                                     aCurSelfProgress, aMaxSelfProgress,
                                     aCurTotalProgress, aMaxTotalProgress) {
          this.tabpreview.onProgressChange(aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
        },

        onStateChange : function(aWebProgress, aRequest, aStateFlags, aStatus) {
          this.tabpreview.onStateChange(aWebProgress, aRequest, aStateFlags, aStatus);
        },

        onLocationChange : function(aWebProgress, aRequest, aLocation) {
          this.tabpreview.onLocationChange(aWebProgress, aRequest, aLocation);
        },

        onStatusChange : function(aWebProgress, aRequest, aStatus, aMessage) {
          this.tabpreview.onStatusChange(aWebProgress, aRequest, aStatus, aMessage);
        },

        onSecurityChange : function(aWebProgress, aRequest, aState) {
          this.tabpreview.onSecurityChange(aWebProgress, aRequest, aState);
        },

        QueryInterface : function(aIID) {
          if (aIID.equals(Components.interfaces.nsIWebProgressListener) ||
              aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
              aIID.equals(Components.interfaces.nsISupports))
            return this;
          throw Components.results.NS_NOINTERFACE;
        }
      });
      </field>

      <method name="_loadStarted">
        <body>
        <![CDATA[
#ifdef ${extension.debug}
          this._logMessage("loadStarted");

#endif
          this.loading = true;
          this._invalid = true;
          this.stopButton.disabled = false;

          //this._emptyDocumentListeners();
          this._changeTimer.cancel();
          this._changeTime = 0;
          this._changeReason = 0;

          this._updateTimer.cancel();
        ]]>
        </body>
      </method>

      <method name="_loadComplete">
        <parameter name="status"/>
        <body>
#ifdef ${extension.debug}
          this._logMessage("loadComplete");

#endif
          this.loading = false;
          this.stopButton.disabled = true;

          if (!this.showPreview)
            return;

          if (status == 0)
            this._documentLoaded();
          else
            this._documentLoadError();
        </body>
      </method>

      <method name="_setSecurity">
        <parameter name="state"/>
        <body>
        <![CDATA[
          const WPL = Components.interfaces.nsIWebProgressListener;

          if (state & WPL.STATE_IS_BROKEN)
            this.setAttribute("security", "broken");
          else if (state & WPL.STATE_IS_INSECURE)
            this.setAttribute("security", "none");
          else if (state & WPL.STATE_IS_SECURE) {
            if (state & WPL.STATE_IDENTITY_EV_TOPLEVEL)
              this.setAttribute("security", "extended");
            else if (state & WPL.STATE_SECURE_HIGH)
              this.setAttribute("security", "high");
            else
              this.setAttribute("security", "low");
          }

          var icon = this.securityIcon;
          if ((this._browser.docShell) && (this._browser.securityUI))
            icon.setAttribute("tooltiptext", this._browser.securityUI.tooltipText);
          else
            icon.removeAttribute("tooltiptext");
        ]]>
        </body>
      </method>

      <!--  Start of nsIWebProgressListener implementation -->

      <method name="onLocationChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="location"/>
        <body>
          var uri = this.uri;
#ifdef ${extension.debug}
          this._logMessage("onLocationChange -> "+uri);
#endif

          var reload = this.reloadButton;
          reload.disabled = (uri == "about:blank" || uri == "");

          this.historyChange();

          if (!this.loading)
            this._checkDocuments("location");
        </body>
      </method>

      <method name="onStateChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="stateFlags"/>
        <parameter name="status"/>
        <body>
        <![CDATA[
#ifdef ${extension.debug}
          //this._logMessage("onStateChange "+stateFlags+" "+status);
#endif
          if (stateFlags & Components.interfaces.nsIWebProgressListener.STATE_IS_NETWORK) {
            if (stateFlags & Components.interfaces.nsIWebProgressListener.STATE_STOP) {
              if (this.loading)
                this._loadComplete(status);
#ifdef ${extension.debug}
              else
                this._logWarning("Received repeat load complete - "+stateFlags);
#endif
            }
            else if (stateFlags & Components.interfaces.nsIWebProgressListener.STATE_START) {
              if (!this.loading)
                this._loadStarted();
#ifdef ${extension.debug}
              else
                this._logWarning("Received repeat load start - "+stateFlags);
#endif
            }
          }
        ]]>
        </body>
      </method>

      <method name="onStatusChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="status"/>
        <parameter name="message"/>
        <body>
#ifdef ${extension.debug}
          //this._logMessage("onStatusChange "+status);
#endif
        </body>
      </method>

      <method name="onProgressChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="curSelfProgress"/>
        <parameter name="maxSelfProgress"/>
        <parameter name="curTotalProgress"/>
        <parameter name="maxTotalProgress"/>
        <body>
#ifdef ${extension.debug}
          //this._logMessage("onProgressChange ");
#endif
          this._invalid = true;
        </body>
      </method>

      <method name="onSecurityChange">
        <parameter name="webProgress"/>
        <parameter name="request"/>
        <parameter name="state"/>
        <body>
#ifdef ${extension.debug}
          //this._logMessage("onSecurityChange "+state);
#endif
          this._setSecurity(state);
        </body>
      </method>

      <method name="onLinkIconAvailable">
        <body>
#ifdef ${extension.debug}
          this._logMessage("onLinkIconAvailable");
#endif
          var el = this.faviconIcon;
          if (el)
            el.src = this.icon;

          if (!this.loading)
            this._checkDocuments("icon");
        </body>
      </method>

      <method name="onTitleChange">
        <body>
          var title = this.title;
#ifdef ${extension.debug}
          this._logMessage("onTitleChange -> "+title);
#endif
          var el = this.titleField;

          if (el)
            el.value = title;

          if (!this.loading)
            this._checkDocuments("title");
        </body>
      </method>

