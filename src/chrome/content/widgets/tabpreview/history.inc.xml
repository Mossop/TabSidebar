# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Tab Sidebar Display.
#
# The Initial Developer of the Original Code is
#      Dave Townsend <dtownsend@oxymoronical.com>.
#
# Portions created by the Initial Developer are Copyright (C) 2007
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
      <method name="gotoHistoryIndex">
        <parameter name="event"/>
        <body>
          var index = event.target.getAttribute("index");
          if (!index)
            return false;

          var where = whereToOpenLink(event);

          if (where == "current") {
            // Normal click.  Go there in the current tab and update session history.
            this._browser.gotoIndex(index);
            return true;
          }
          else {
            // Modified click.  Go there in a new tab/window.
            // This code doesn't copy history or work well with framed pages.

            var sessionHistory = this._browser.sessionHistory;
            var entry = sessionHistory.getEntryAtIndex(index, false);
            var url = entry.URI.spec;
            openUILinkIn(url, where);
            return true;
          }
        </body>
      </method>

      <method name="goBack">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ((!this._browser) || (!this._browser.docShell))
            return;

          if (event) {
            var where = whereToOpenLink(event, false, false);
            if (where == "current") {
              this._browser.goBack();
            }
            else {
              var sessionHistory = this._browser.sessionHistory;
              var currentIndex = sessionHistory.index;
              var entry = sessionHistory.getEntryAtIndex(currentIndex - 1, false);
              var url = entry.URI.spec;
              openUILinkIn(url, where);
            }
          }
          else {
            this._browser.goBack();
          }
        ]]>
        </body>
      </method>

      <method name="populateHistoryMenu">
        <parameter name="event"/>
        <body>
        <![CDATA[
          var menu = event.target;

          while (menu.firstChild)
            menu.removeChild(menu.firstChild);

          if ((this._browser) && (this._browser.docShell)) {
            var sessionHistory = this._browser.sessionHistory;

            if (sessionHistory.count == 1)
              return false;

            var fis = Components.classes["@mozilla.org/browser/favicon-service;1"]
                                .getService(Components.interfaces.nsIFaviconService);

            var start = Math.min(sessionHistory.count - 1, sessionHistory.index + 5);
            var end = Math.max(0, sessionHistory.index - 5);

            for (var pos = start; pos >= end; pos--) {
              var entry = sessionHistory.getEntryAtIndex(pos, false);
              if (entry) {
                var menuitem = document.createElement("menuitem");
                menuitem.setAttribute("label", entry.title);
                menuitem.setAttribute("tooltiptext", entry.title);
                menuitem.setAttribute("index", pos);

                if (pos == sessionHistory.index) {
                  menuitem.setAttribute("class", "tbs-history-current");
                  menuitem.setAttribute("type", "radio");
                  menuitem.setAttribute("checked", "true");
                }
                else {
                  if (pos > sessionHistory.index) {
                    menuitem.setAttribute("class", "menuitem-iconic tbs-history-forward");
                  }
                  else if (pos < sessionHistory.index) {
                    menuitem.setAttribute("class", "menuitem-iconic tbs-history-back");
                  }

                  try {
                    var iconURL = fis.getFaviconForPage(entry.URI).spec;
                    menuitem.style.listStyleImage = "url(" + iconURL + ")";
                  } catch (ex) {}
                }

                menu.appendChild(menuitem);
              }
            }
          }
          return true;
        ]]>
        </body>
      </method>

      <method name="goForward">
        <parameter name="event"/>
        <body>
        <![CDATA[
          if ((!this._browser) || (!this._browser.docShell))
            return;

          if (event) {
            var where = whereToOpenLink(event, false, false);
            if (where == "current") {
              this._browser.goForward();
            }
            else {
              var sessionHistory = this._browser.sessionHistory;
              var currentIndex = sessionHistory.index;
              var entry = sessionHistory.getEntryAtIndex(currentIndex + 1, false);
              var url = entry.URI.spec;
              openUILinkIn(url, where);
            }
          }
          else {
            this._browser.goForward();
          }
        ]]>
        </body>
      </method>

      <method name="historyChange">
        <body>
        <![CDATA[
          if ((this._browser) && (this._browser.docShell)) {
            var session = this._browser.sessionHistory;
            this.historyButton.disabled = !session || session.count <= 1;
            this.backButton.disabled = !session || (session.index <= 0);
            this.forwardButton.disabled = !session || ((session.index + 1) == session.count);
          }
          else {
            this.historyButton.disabled = true;
            this.backButton.disabled = true;
            this.forwardButton.disabled = true;
          }
        ]]>
        </body>
      </method>

