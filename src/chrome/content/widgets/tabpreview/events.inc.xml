# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Tab Sidebar Display.
#
# The Initial Developer of the Original Code is
#      Dave Townsend <dtownsend@oxymoronical.com>.
#
# Portions created by the Initial Developer are Copyright (C) 2007
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
      <field name="_changeTimer">
        Components.classes["@mozilla.org/timer;1"].createInstance(Components.interfaces.nsITimer);
      </field>
      <field name="_changeTime">0</field>

      <field name="_timerListener">
      ({
        tabpreview: this,

        notify : function(timer) {
          if (this.tabpreview)
            this.tabpreview.notify(timer);
        },

        QueryInterface : function(aIID) {
          if (aIID.equals(Components.interfaces.nsITimerCallback) ||
              aIID.equals(Components.interfaces.nsISupportsWeakReference) ||
              aIID.equals(Components.interfaces.nsISupports))
            return this;
          throw Components.results.NS_NOINTERFACE;
        }
      });
      </field>

      <method name="_addListeners">
        <body>
#ifdef ${extension.debug}
          this._logMessage("Add browser listeners");

#endif
          this._browser.addEventListener("DOMTitleChanged",        this._browserListener, false);
          this._browser.addEventListener("resize",                 this._browserListener, false);
          this._updatePaintListener();

          const mask = Components.interfaces.nsIWebProgress.NOTIFY_ALL;
          if (this._browser.docShell)
            this._browser.webProgress.addProgressListener(this._progressListener, mask);
#ifdef ${extension.debug}
          else
            this._logError("Could not register browser progress listener");
#endif
        </body>
      </method>

      <method name="_removeListeners">
        <body>
          try {
#ifdef ${extension.debug}
            this._logMessage("Remove browser listeners");

#endif
            this._browser.removeEventListener("DOMTitleChanged",   this._browserListener, false);
            this._browser.removeEventListener("resize",            this._browserListener, false);
            this._browser.removeEventListener("MozAfterPaint",     this._browserListener, false);

            if (this._browser.docShell)
              this._browser.webProgress.removeProgressListener(this._progressListener);
#ifdef ${extension.debug}
            else
              this._logWarning("Could not unregister browser progress listener");
#endif
          }
          catch (e) {
#ifdef ${extension.debug}
            this._logError("Error removing listeners from tab: "+e);
            dump(e+"\n");
#endif
          }
        </body>
      </method>

      <method name="_updatePaintListener">
        <body>
        <![CDATA[
          if (this.showPreview && this.previews.updatePreviews)
            this._browser.addEventListener("MozAfterPaint", this._browserListener, false);
          else
            this._browser.removeEventListener("MozAfterPaint", this._browserListener, false);
        ]]>
        </body>
      </method>

      <method name="_documentPainted">
        <parameter name="clientRect"/>
        <body>
        <![CDATA[
          if (!this.previews)
            return;

          var region = null;
          if (clientRect) {
#ifdef ${extension.debug}
            /*this._logMessage("MozAfterPaint " +
                             clientRect.left + "x" + clientRect.top + " - " +
                             clientRect.right + "x" + clientRect.bottom);*/
#endif
            var win = this._browser.contentWindow;
            var region = {
              left:   clientRect.left   + win.scrollX,
              top:    clientRect.top    + win.scrollY,
              right:  clientRect.right  + win.scrollX,
              bottom: clientRect.bottom + win.scrollY
            };
          }

          this._invalidate(region);
          if (!this._invalid)
            return;

          var delay = this.selected ? this.previews.delay.selected : this.previews.delay.unselected;
          if (delay < 0) {
            this.redraw();
            return;
          }

          var date = Date.now() + delay;

          if (date > this._changeTime) {
            this._changeTimer.cancel();
            this._changeTimer.initWithCallback(this._timerListener, delay, Components.interfaces.nsITimer.TYPE_ONE_SHOT);
            this._changeTime = date;
          }
        ]]>
        </body>
      </method>

      <method name="_browserResized">
        <body>
        <![CDATA[
          var width = this._browser.parentNode.parentNode.boxObject.width;
          var height = this._browser.parentNode.parentNode.boxObject.height;

          var findbar = this._browser.ownerDocument.getElementById("FindToolbar");
          if (!findbar.hidden)
            height += findbar.boxObject.height;

#ifdef ${extension.debug}
          //this._logMessage("Browser resized to " + width + "x" + height);
#endif
          this._browserHeight = height;
          this._browserWidth = width;
          this._invalidate(null);
        ]]>
        </body>
      </method>

      <field name="_browserListener">
      <![CDATA[
      ({
        tabpreview: this,

        handleEvent: function(event) {
          if (this.tabpreview._destroyed)
            return;

          if (!this.tabpreview.previews)
            return;

          try {
#ifdef ${extension.debug}
            //this.tabpreview._logMessage("Event - "+event.type);
#endif
            switch (event.type) {
              case "MozAfterPaint":
                this.tabpreview._documentPainted(event.boundingClientRect);
                break;
              case "DOMTitleChanged":
                this.tabpreview.onTitleChange();
                break;
              case "resize":
                this.tabpreview._browserResized();
                this.tabpreview.previews.browserResized(this.tabpreview, this.tabpreview._browserWidth, this.tabpreview._browserHeight);
                break;
              default:
#ifdef ${extension.debug}
                this.tabpreview._logMessage("Unknown event - "+event.type);
#endif
            }
          }
          catch (e) {
#ifdef ${extension.debug}
            this.tabpreview._logWarning(e);
#endif
          }
        }
      })
      ]]>
      </field>

      <!--  Start of nsITimerCallback implementation -->

      <method name="notify">
        <parameter name="timer"/>
        <body>
        <![CDATA[
          if ((!this.previews) || (!this._browser))
            return;

          this.redraw();
        ]]>
        </body>
      </method>

