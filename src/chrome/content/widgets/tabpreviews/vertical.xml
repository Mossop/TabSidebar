# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is Tab Sidebar Display.
#
# The Initial Developer of the Original Code is
#      Dave Townsend <dtownsend@oxymoronical.com>.
#
# Portions created by the Initial Developer are Copyright (C) 2007
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****
<?xml version="1.0"?>

<!DOCTYPE bindings [
<!ENTITY % bidiDTD SYSTEM "chrome://global/locale/global.dtd">
<!ENTITY % tabbrowserDTD SYSTEM "chrome://global/locale/tabbrowser.dtd" >
<!ENTITY % tabSidebarDTD SYSTEM "chrome://tabsidebar/locale/tabsidebar.dtd" >
%bidiDTD;
%tabbrowserDTD;
%tabSidebarDTD;
]>

<bindings id="TabSidebarBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xhtml="http://www.w3.org/1999/xhtml">

  <binding id="tabpreviews" name="tabpreviews" extends="chrome://tabsidebar/content/widgets/tabpreviews.xml#tabpreviews">

    <resources>
      <stylesheet src="chrome://tabsidebar/content/widgets/tabpreviews.css"/>
    </resources>

    <content class="tbs-tabpreviews-vertical" hide="" align="stretch" orient="horizontal" style="visibility: hidden">
      <xul:popupset>

        <xul:tooltip id="tabpreview_tooltip" orient="vertical" align="center" onpopupshowing="this.parentNode.parentNode.onPreviewTooltipShowing(event);">
          <xul:label class="tbs-tooltip-title" crop="end" value="Title"/>
          <xul:label class="tbs-tooltip-uri" crop="end" value="URI"/>
          <xul:image class="tbs-tooltip-image"/>
          <xhtml:canvas class="tbs-tooltip-canvas"/>
        </xul:tooltip>

      </xul:popupset>

      <xul:vbox class="tbs-drop-indicator-bar">
        <xul:hbox chromedir="&locale.dir;" class="tbs-drop-indicator"/>
      </xul:vbox>

      <xul:box class="tbs-focusdetector" style="-moz-user-focus: normal"/>

      <xul:vbox flex="1" align="stretch">
        <xul:toolbar class="tbs-scrolltoolbar">
          <xul:toolbarbutton class="tbs-scrollstart" tooltiptext="&tabsidebar.scrollstart;" oncommand="this.parentNode.parentNode.parentNode.scrollToStart();"/>
          <xul:toolbarbutton class="tbs-scrollup" flex="1" tooltiptext="&tabsidebar.scrollup;" oncommand="this.parentNode.parentNode.parentNode.scrollBy(-3);"/>
          <xul:toolbarbutton class="tbs-startoverflow" type="menu">
            <xul:menupopup popupanchor="topright" popupalign="topleft"
                           onpopupshowing="return this.parentNode.parentNode.parentNode.parentNode.showFirstTabs(this);"
                           oncommand="this.parentNode.parentNode.parentNode.parentNode.onPreviewSelect(event.target.tabpreview);"/>
          </xul:toolbarbutton>
        </xul:toolbar>

        <xul:scrollbox class="tbs-scrollbox" allowevents="true" anonid="scrollbox"
                       ondraggesture="nsDragAndDrop.startDrag(event, this.parentNode.parentNode); event.stopPropagation();"
                       ondragover="nsDragAndDrop.dragOver(event, this.parentNode.parentNode); event.stopPropagation();"
                       ondragdrop="nsDragAndDrop.drop(event, this.parentNode.parentNode); event.stopPropagation();"
                       ondragexit="nsDragAndDrop.dragExit(event, this.parentNode.parentNode); event.stopPropagation();"
                       oncontextmenu="this.parentNode.parentNode.onContextMenu(event);"
                       onclick="this.parentNode.parentNode.onClick(event);"
                       ondblclick="this.parentNode.parentNode.onDblClick(event);"
                       align="stretch" flex="1" orient="vertical">

          <children/>

        </xul:scrollbox>

        <xul:toolbar class="tbs-scrolltoolbar">
          <xul:toolbarbutton class="tbs-scrollend" tooltiptext="&tabsidebar.scrollend;" oncommand="this.parentNode.parentNode.parentNode.scrollToEnd();"/>
          <xul:toolbarbutton class="tbs-scrolldown" flex="1" tooltiptext="&tabsidebar.scrolldown;" oncommand="this.parentNode.parentNode.parentNode.scrollBy(3);"/>
          <xul:toolbarbutton class="tbs-endoverflow" type="menu">
            <xul:menupopup popupanchor="bottomright" popupalign="bottomleft"
                           onpopupshowing="return this.parentNode.parentNode.parentNode.parentNode.showLastTabs(this);"
                           oncommand="this.parentNode.parentNode.parentNode.parentNode.onPreviewSelect(event.target.tabpreview);"/>
          </xul:toolbarbutton>
        </xul:toolbar>
      </xul:vbox>
    </content>

    <implementation>

      <field name="previewContainer">this</field>
      <field name="focusDetector">this.ownerDocument.getAnonymousNodes(this)[2]</field>
      <field name="scrollBox">this.ownerDocument.getAnonymousNodes(this)[3].childNodes[1]</field>
      <field name="scrollPanel">this.ownerDocument.getAnonymousNodes(this.scrollBox)[0]</field>
      <field name="scrollBoxObject">this.scrollBox.boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject)</field>
      <field name="dragDropBar">this.ownerDocument.getAnonymousNodes(this)[1]</field>
      <field name="dragDropIndicator">this.dragDropBar.firstChild;</field>
      <field name="scrollStartToolbar">this.ownerDocument.getAnonymousNodes(this)[3].childNodes[0]</field>
      <field name="scrollEndToolbar">this.ownerDocument.getAnonymousNodes(this)[3].childNodes[2]</field>

      <field name="_startScrollDisabled">false</field>
      <field name="_endScrollDisabled">false</field>

      <method name="_resizePreview">
        <parameter name="preview"/>
        <body>
        <![CDATA[
          if (this.displayHeight<0) {
#ifdef ${extension.debug}
            this._logWarning("Attempt to resize preview before size has been calculated");
#endif
            return;
          }
#ifdef ${extension.debug}
          this._logMessage("Sizing preview to "+this.displayWidth+"x"+this.displayHeight);
#endif

          var canvas = preview.canvas;
          canvas.style.height = this.displayHeight + "px";
          canvas.style.minHeight = this.displayHeight + "px";
          canvas.style.maxHeight = this.displayHeight + "px";
          canvas.style.width = this.displayWidth + "px";
          canvas.style.minWidth = this.displayWidth + "px";
          canvas.style.maxWidth = this.displayWidth + "px";

          var container = canvas.parentNode.parentNode;
          var computed = window.getComputedStyle(container,null);
          var diff = 0;
          diff += parseInt(computed.paddingTop);
          diff += parseInt(computed.paddingBottom);
          container.style.height = (this.displayHeight + diff) + "px";

          try {
            canvas.getContext("2d");
          }
          catch (e) { }
        ]]>
        </body>
      </method>

      <method name="ensureElementsAreVisible">
        <parameter name="first"/>
        <parameter name="last"/>
        <body>
        <![CDATA[
          var y = {};
          this.scrollBoxObject.getPosition({}, y);
          var scrollTop = y.value;
          var scrollHeight = this.scrollBoxObject.height;

          var eltop = first.boxObject.y;
          var style = window.getComputedStyle(first, null);
          eltop -= parseInt(style.marginTop) + parseInt(style.borderTopWidth);
          eltop -= this.scrollBoxObject.y;

          var elbottom = last.boxObject.y+last.boxObject.height;
          style = window.getComputedStyle(last, null);
          elbottom+=parseInt(style.marginBottom) + parseInt(style.borderBottomWidth);
          elbottom -= this.scrollBoxObject.y;

          if (scrollTop>eltop) {
            this.scrollBoxObject.scrollBy(0, eltop - scrollTop);
#ifdef ${extension.enablesessionstore}
            this._storeSessionValue("scrollpos", this.getScrollPosition());
#endif
          }
          else if ((scrollTop + scrollHeight) < elbottom) {
            var shift = elbottom - (scrollTop + scrollHeight);
            if ((scrollTop + shift) > eltop)
              shift=eltop-scrollTop;
            this.scrollBoxObject.scrollBy(0, shift);
#ifdef ${extension.enablesessionstore}
            this._storeSessionValue("scrollpos", this.getScrollPosition());
#endif
          }
        ]]>
        </body>
      </method>

      <method name="_calculateSize">
        <body>
        <![CDATA[
          var newWidth = 0;
          var newHeight = 0;

          var container = this._selected.canvas.parentNode.parentNode;
          var computed = window.getComputedStyle(container,null);
          var diff = 0;
          diff += parseInt(computed.borderLeftWidth);
          diff += parseInt(computed.borderRightWidth);
          diff += parseInt(computed.paddingLeft);
          diff += parseInt(computed.paddingRight);

          newWidth = container.boxObject.width - diff;

          if (newWidth <= 0) {
#ifdef ${extension.debug}
            this._logWarning("Invalid sizes - retrying in a few");
#endif
            return false;
          }
          newHeight = parseInt((this._browserHeight / this._browserWidth) * newWidth);

#ifdef ${extension.debug}
          this._logMessage("New sizes: " + newWidth + "x" + newHeight + " " + this._browserWidth + "x" + this._browserHeight);
#endif
          if (this._displayWidth != newWidth || this._displayHeight != newHeight) {
            this._displayWidth = newWidth;
            this._displayHeight = newHeight;
            this._contentWidth = Math.max(this.displayWidth, 500);
            this._contentHeight = (this.displayHeight / this.displayWidth) * this._contentWidth;
#ifdef ${extension.enablemetrics}
            this._saveMetrics();
#endif
          }
          return true;
        ]]>
        </body>
      </method>

      <method name="_drawDropIndicator">
        <parameter name="drop"/>
        <body>
          if (drop!=this._lastDrop) {
            this.ensureElementsAreVisible(drop, drop);
            var y = {};
            this.scrollBoxObject.getPosition({}, y);
            var dropel = drop;
            if (drop.localName == "tabpreview")
              dropel = drop.canvas.parentNode;

            var pos = dropel.boxObject.y + (dropel.boxObject.height / 2) - this.boxObject.y;
            pos = pos - y.value - 5;
            this.dragDropIndicator.style.marginTop = pos + "px";
            if (!this._lastDrop)
              this.dragDropBar.setAttribute("dragging", "true");
            this._lastDrop = drop;
          }
        </body>
      </method>

      <method name="getDropElement">
        <parameter name="aEvent"/>
        <parameter name="external"/>
        <body>
        <![CDATA[
          var y = {};
          this.scrollBoxObject.getPosition({}, y);
          var ypos = aEvent.clientY + y.value;
          var diff = 0;
          var previews = this.previews;
          for (var i = 0; i < previews.length; i++) {
            var bo = previews[i].boxObject;
            if (external) {
              if (bo.y > ypos)
                return previews[i].previousSibling;
              else if ((bo.y + bo.height) >= ypos)
                return previews[i];
            }
            else {
              if ((bo.y + (bo.height / 2)) > ypos)
                return previews[i].previousSibling;
            }
          }
          return previews[previews.length - 1].nextSibling;
        ]]>
        </body>
      </method>

      <method name="checkDragScroll">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          var pos = aEvent.clientY - this.scrollBoxObject.y;
          var y = {};
          this.scrollBoxObject.getPosition({}, y);

          if (y.value > 0 && pos < 10) {
            this.scrollBoxObject.scrollBy(0, -20);
            this._hideDropIndicator();
            return true;
          }

          var bottom = this.ownerDocument.getAnonymousNodes(this.scrollBox)[0].boxObject.height - this.scrollBox.boxObject.height;

          if ((this.scrollBox.boxObject.height - pos) < 10 && (y.value < bottom)) {
            this.scrollBoxObject.scrollBy(0, 20);
            this._hideDropIndicator();
            return true;
          }

          return false;
        ]]>
        </body>
      </method>

      <method name="getScrollPosition">
        <body>
          var value = {};
          this.scrollBoxObject.getPosition({}, value);
          return value.value;
        </body>
      </method>

      <method name="scrollTo">
        <parameter name="position"/>
        <body>
          this.scrollBoxObject.scrollTo(0, position);
#ifdef ${extension.enablesessionstore}
          this._storeSessionValue("scrollpos", position);
#endif
        </body>
      </method>

      <method name="scrollBy">
        <parameter name="distance"/>
        <body>
          this.scrollBoxObject.scrollByLine(distance);
#ifdef ${extension.enablesessionstore}
          this._storeSessionValue("scrollpos", this.getScrollPosition());
#endif
        </body>
      </method>

      <method name="scrollToStart">
        <body>
          this.scrollTo(0);
        </body>
      </method>

      <method name="scrollToEnd">
        <body>
          this.scrollTo(this.scrollBoxObject.height);
        </body>
      </method>

      <method name="_checkScrollPosition">
        <body>
        <![CDATA[
          var y = {};
          this.scrollBoxObject.getPosition({}, y);
          var end = y.value + this.scrollBoxObject.height;
          if (this.scrollPanel.boxObject.height <= this.scrollBoxObject.height)
            this.scrollToStart();
          else if (end > this.scrollPanel.boxObject.height)
            this.scrollToEnd();
        ]]>
        </body>
      </method>

      <method name="_updateScrollButtons">
        <body>
        <![CDATA[
          var y = {};
          this.scrollBoxObject.getPosition({}, y);
          var state = (y.value <= 0);
          if (state != this._startScrollDisabled) {
            var button = this.scrollStartToolbar.firstChild;
            while (button) {
              button.disabled = state;
              button = button.nextSibling;
            }
            this._startScrollDisabled = state;
          }

          var height = this.scrollPanel.boxObject.height;
          state = ((y.value + this.scrollBoxObject.height) >= height);
          if (state != this._endScrollDisabled) {
            button = this.scrollEndToolbar.firstChild;
            while (button) {
              button.disabled = state;
              button = button.nextSibling;
            }
            this._endScrollDisabled = state;
          }
        ]]>
        </body>
      </method>

      <method name="showFirstTabs">
        <parameter name="menupopup"/>
        <body>
        <![CDATA[
          while (menupopup.firstChild)
            menupopup.removeChild(menupopup.firstChild);

          var y = {};
          this.scrollBoxObject.getPosition({}, y);
          var node = this.firstChild;
          while ((node.boxObject.y - this.scrollBoxObject.y) < y.value) {
            if (node.localName == "tabpreview") {
              var item = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
              item.setAttribute("label", node.title);
              item.setAttribute("class", "menuitem-iconic");
              if (node.faviconIcon.src != null)
                item.setAttribute("image", node.faviconIcon.src);
              menupopup.appendChild(item);
              item.tabpreview = node;
            }
            node = node.nextSibling;
          }
          return (menupopup.firstChild != null);
        ]]>
        </body>
      </method>

      <method name="showLastTabs">
        <parameter name="menupopup"/>
        <body>
          while (menupopup.firstChild)
            menupopup.removeChild(menupopup.firstChild);

          var y = {};
          this.scrollBoxObject.getPosition({}, y);
          y.value += this.scrollBoxObject.height;
          var node = this.lastChild;
          while ((node.boxObject.y - this.scrollBoxObject.y + node.boxObject.height) > y.value) {
            if (node.localName == "tabpreview") {
              var item = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "menuitem");
              item.setAttribute("label", node.title);
              item.setAttribute("class", "menuitem-iconic");
              if (node.faviconIcon.src != null)
                item.setAttribute("image", node.faviconIcon.src);
              menupopup.insertBefore(item, menupopup.firstChild);
              item.tabpreview = node;
            }
            node = node.previousSibling;
          }
          return (menupopup.firstChild != null);
        </body>
      </method>

    </implementation>

    <handlers>
      <handler event="keypress">
      <![CDATA[
        if (event.target.parentNode == this) {
          var preview = event.target;
          if (event.altKey || event.shiftKey || event.metaKey)
            return;
          if (event.ctrlKey) {
            if (event.keyCode == event.DOM_VK_UP) {
              var newpreview = preview.previousSibling.previousSibling;
              if (newpreview)
                this.movePreview(preview, newpreview);
              event.preventDefault();
            }
            else if (event.keyCode == event.DOM_VK_DOWN) {
              var newpreview = preview.nextSibling.nextSibling;
              if (newpreview)
                this.movePreview(preview, newpreview.nextSibling.nextSibling);
              event.preventDefault();
            }
          }
          else {
            if (event.keyCode == event.DOM_VK_UP) {
              var newpreview = preview.previousSibling.previousSibling;
              if (newpreview) {
                preview.tab.focus();
                this.tabbrowser.selectedTab = newpreview.tab;
                newpreview.setfocus();
              }
              event.preventDefault();
            }
            else if (event.keyCode == event.DOM_VK_DOWN) {
              var newpreview = preview.nextSibling.nextSibling;
              if (newpreview) {
                preview.tab.focus();
                this.tabbrowser.selectedTab = newpreview.tab;
                newpreview.setfocus();
              }
              event.preventDefault();
            }
            else if (event.keyCode == event.DOM_VK_PAGE_UP) {
              var compare = preview.previousSibling.previousSibling;
              if (compare) {
                var diff = preview.boxObject.y - compare.boxObject.y;
                var height = this.scrollBox.boxObject.height;
                var jump = height / diff;
                var current = preview;
                var count = 1;
                while ((count <= jump) && (current.previousSibling.previousSibling)) {
                  current = current.previousSibling.previousSibling;
                  count++;
                }
                preview.tab.focus();
                this.tabbrowser.selectedTab = current.tab;
                current.setfocus();
              }
              event.preventDefault();
            }
            else if (event.keyCode == event.DOM_VK_PAGE_DOWN) {
              var compare = preview.nextSibling.nextSibling;
              if (compare) {
                var diff = compare.boxObject.y - preview.boxObject.y;
                var height = this.scrollBox.boxObject.height;
                var jump = height / diff;
                var current = preview;
                var count = 1;
                while ((count <= jump) && (current.nextSibling.nextSibling)) {
                  current = current.nextSibling.nextSibling;
                  count++;
                }
                preview.tab.focus();
                this.tabbrowser.selectedTab=current.tab;
                current.setfocus();
              }
              event.preventDefault();
            }
            else if (event.keyCode == event.DOM_VK_CONTEXT_MENU) {
              var preview = null;

              if (this._selected)
                preview = this._selected;
              else
                preview = this.previews[0];

              var x = preview.boxObject.screenX - this.browserWindow.document.documentElement.boxObject.screenX;
              var y = preview.boxObject.screenY - this.browserWindow.document.documentElement.boxObject.screenY;

              x+=2;
              y+=2;

              this.displayContextMenu(preview, x, y);
            }
          }
        }
      ]]>
      </handler>
    </handlers>
  </binding>
</bindings>
