      <!-- Start of DnD implementation -->

      <field name="_lastDrop">null</field>

      <method name="_hideDropIndicator">
        <body>
          this.dragDropBar.setAttribute("dragging", "false");
          this._lastDrop = null;
        </body>
      </method>

      <method name="_onDragStart">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          try {
            var target = aEvent.target;
            if (target.localName == "tabpreview" &&
                aEvent.originalTarget.localName != "toolbarbutton") {
              var dt = aEvent.dataTransfer;
              dt.mozSetDataAt("application/x-moz-node", this.getTabForPreview(target), 0);
              var URI = target._browser.currentURI;
              if (URI) {
                var spec = URI.spec;
                var title = target.title;
                dt.mozSetDataAt("text/x-moz-url", spec + "\n" + title, 0);
                dt.mozSetDataAt("text/uri-list", spec + "\n" + title, 0);
                dt.mozSetDataAt("text/plain", spec, 0);
                dt.mozSetDataAt("text/html", '<a href="' + spec + '">' + title + '</a>', 0);
              }
              else {
                dt.mozSetDataAt("text/plain", "about:blank", 0);
              }
            }
          }
          catch (e) {
#ifdef ${extension.debug}
            this._logError("Error in _onDragStart: " + e);
#endif
          }
        ]]>
        </body>
      </method>

      <method name="_onDragOver">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          try {
            if (this.checkDragScroll(aEvent)) {
              this._hideDropIndicator();
              return;
            }

            var effect = this.tabbrowser._setEffectAllowedForDataTransfer(aEvent);
            if (effect == "none") {
              this._hideDropIndicator();
              return;
            }

            var drop = this.getDropElement(aEvent, effect != "copyMove");

            if (effect == "copyMove") {
              var sourceNode = aEvent.dataTransfer.mozGetDataAt("application/x-moz-node", 0);
              var preview = this.getPreviewForTab(sourceNode);
              if (preview &&
                  (drop.nextSibling == preview || drop.previousSibling == preview)) {
                aEvent.dataTransfer.effectAllowed = "none";
                this._hideDropIndicator();
                return;
              }
            }
            this._drawDropIndicator(drop);
            aEvent.preventDefault();
          }
          catch (e) {
#ifdef ${extension.debug}
            this._logError("Error in _onDragOver: " + e);
#endif
          }
        ]]>
        </body>
      </method>

      <method name="movePreview">
        <parameter name="preview"/>
        <parameter name="insertBefore"/>
        <body>
        <![CDATA[
          var newIndex = this.previews.length;
          if (insertBefore)
            newIndex = insertBefore.tab._tPos;

          var oldIndex = preview.tab._tPos;

          if (newIndex > oldIndex)
            newIndex--;

          if (newIndex == oldIndex)
            return;

          var focus=false;
          if (this.ownerDocument.commandDispatcher.focusedElement == preview)
            focus=true;

          this.tabbrowser.moveTabTo(preview.tab, newIndex);
        ]]>
        </body>
      </method>

      <method name="_onDrop">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          try {
            this._hideDropIndicator();

            var dt = aEvent.dataTransfer;
            var effect = dt.dropEffect;
            if (effect != "link") {
              var target = this.getDropElement(aEvent, false);
              var sourceTab = dt.mozGetDataAt("application/x-moz-node", 0);
              if (effect == "move") {
                var preview = this.getPreviewForTab(sourceTab);
                if (preview) {
#ifdef ${extension.debug}
                  this._logMessage("Moving preview within window");
#endif
                  this.movePreview(preview, target.nextSibling);
                  return;
                }
                else {
#ifdef ${extension.debug}
                  this._logMessage("Moving preview from another window");
#endif
                  var newTab = this.tabbrowser.addTab("about:blank");
                  var newBrowser = this.tabbrowser.getBrowserForTab(newTab);
                  newBrowser.stop();
                  newBrowser.docShell;
                  preview = this.getPreviewForTab(newTab);
                  this.movePreview(preview, target.nextSibling);
                  this.tabbrowser.swapBrowsersAndCloseOther(newTab, sourceTab);
                  this.selectPreview(preview);
                  preview.update();
                  preview.redraw();
                  this.tabbrowser.setTabTitle(newTab);
                }
              }
              else {
#ifdef ${extension.debug}
                this._logMessage("Copying preview");
#endif
                newTab = this.tabbrowser.duplicateTab(sourceTab);
                preview = this.getPreviewForTab(newTab);
                this.movePreview(preview, target.nextSibling);
                this.selectPreview(preview);
              }
              return;
            }

            var url;
            var supportedLinkTypes = ["text/x-moz-url", "text/uri-list", "text/plain", "application/x-moz-file"];
            for (var i=0; i < supportedLinkTypes.length; i++) {
              let dataType = supportedLinkTypes[i];
              // uri-list: for now, support dropping of the first URL
              // only
              var isURLList = dataType == "text/uri-list";
              let urlData = isURLList ?
                            dt.mozGetDataAt("URL", 0) : dt.mozGetDataAt(dataType, 0);
              if (urlData) {
                url = transferUtils.retrieveURLFromData(urlData, isURLList ? "text/plain" : dataType);
                break;
              }
            }
            var target = this.getDropElement(aEvent, true);

            // valid urls don't contain spaces ' '; if we have a space it isn't a valid url.
            // Also disallow dropping javascript: or data: urls--bail out
            if (!url || !url.length || url.indexOf(" ", 0) != -1 ||
                /^\s*(javascript|data):/.test(url))
              return;

            // XXXmano: temporary fix until dragDropSecurityCheck make the
            // drag-session an optional paramter
            var dragService = Cc["@mozilla.org/widget/dragservice;1"].
                              getService(Ci.nsIDragService);
            var dragSession = dragService.getCurrentSession();
            nsDragAndDrop.dragDropSecurityCheck(aEvent, dragSession, url);

            var prefs = Components.classes["@mozilla.org/preferences-service;1"]
                                  .getService(Components.interfaces.nsIPrefBranch);
            var bgLoad = true;
            try {
              bgLoad = prefs.getBoolPref("browser.tabs.loadInBackground");
            }
            catch (e) { }

            if (aEvent.shiftKey)
              bgLoad = !bgLoad;

            if (target.localName != "tabpreview") {
#ifdef ${extension.debug}
              this._logMessage("Adding new url");
#endif
              newTab = this.tabbrowser.loadOneTab(getShortcutOrURI(url), null, null, null, bgLoad, false);
              preview = this.getPreviewForTab(newTab);
              this.movePreview(preview, target.nextSibling);
              if (!bgLoad)
                this.selectPreview(preview);
            }
            else {
#ifdef ${extension.debug}
              this._logMessage("Loading new url in existing preview");
#endif
              target.browser.loadURI(getShortcutOrURI(url));
              if (!bgLoad)
                this.selectPreview(target);
            }
          }
          catch (e) {
#ifdef ${extension.debug}
            this._logError("Error in _onDrop: " + e);
#endif
          }
        ]]>
        </body>
      </method>

      <method name="_onDragLeave">
        <parameter name="aEvent"/>
        <body>
        <![CDATA[
          this._hideDropIndicator();
        ]]>
        </body>
      </method>
