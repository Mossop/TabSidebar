      <method name="_initSettings">
        <body>
#ifdef ${extension.debug}
          try {
            this._enableLogging = this.preferences.getBoolPref("enablelogging");
          }
          catch (e) { }

#endif
          this._showNavigation = this.preferences.getBoolPref("content.navigation");
          this._showPreviews = this.preferences.getBoolPref("content.previews");
          this._updatePreviews = this.preferences.getBoolPref("updatepreviews");
          this._scrollSelects = this.preferences.getBoolPref("scrollselects");

          this._drawScrolled = this.preferences.getBoolPref("drawscrolled");
          this._validateRate = this.preferences.getIntPref("validaterate");

          this._getDelayPref("loaderrordelay", "loadError", true);
          this._getDelayPref("unselectedloaderrordelay", "loadError", false);
          this._getDelayPref("loaddelay", "load", true);
          this._getDelayPref("unselectedloaddelay", "load", false);
          this._getDelayPref("scrolldelay", "scroll", true);
          this._getDelayPref("unselectedscrolldelay", "scroll", false);
          this._getDelayPref("textdelay", "text", true);
          this._getDelayPref("unselectedtextdelay", "text", false);
          this._getDelayPref("changedelay", "change", true);
          this._getDelayPref("unselectedchangedelay", "change", false);

          this.preferences.addObserver("", this, false);

          this.updateDisplay();
        </body>
      </method>

      <!-- Configuration options -->

#ifdef ${extension.debug}
      <field name="_enableLogging">false</field>
      <property name="enableLogging" onget="return this._enableLogging;"/>

#endif
      <field name="_scrollSelects">false</field>
      <property name="scrollSelects" onget="return this._scrollSelects;"/>

      <field name="_showPreviews">false</field>
      <property name="showPreviews" onget="return this._showPreviews;"/>

      <field name="_updatePreviews">false</field>
      <property name="updatePreviews" onget="return (this._updatePreviews &amp;&amp; this._showPreviews);"/>

      <field name="_showNavigation">false</field>
      <property name="showNavigation" onget="return this._showNavigation;"/>

      <field name="_displayWidth">-1</field>
      <property name="displayWidth" onget="return this._displayWidth;"/>

      <field name="_displayHeight">-1</field>
      <property name="displayHeight" onget="return this._displayHeight;"/>

      <field name="_contentWidth">-1</field>
      <property name="contentWidth" onget="return this._contentWidth;"/>

      <field name="_contentHeight">-1</field>
      <property name="contentHeight" onget="return this._contentHeight;"/>

      <field name="delays">
      ({
        load: {
          selected: 0,
          unselected: 0
        },
        loadError: {
          selected: 0,
          unselected: 0
        },
        change: {
          selected: 0,
          unselected: 0
        },
        text: {
          selected: 0,
          unselected: 0
        },
        scroll: {
          selected: 0,
          unselected: 0
        }
      })
      </field>

      <field name="_drawScrolled"/>
      <property name="drawScrolled" onget="return this._drawScrolled;"/>

      <method name="_getDelayPref">
        <parameter name="pref"/>
        <parameter name="type"/>
        <parameter name="selected"/>
        <body>
          var value = this.preferences.getIntPref(pref);
          if (selected)
            this.delays[type].selected = value;
          else
            this.delays[type].unselected = value;
        </body>
      </method>

      <!-- Start of nsIObserver implementation -->

      <method name="observe">
        <parameter name="subject"/>
        <parameter name="topic"/>
        <parameter name="data"/>
        <body>
        <![CDATA[
          switch (data) {
            case "content.navigation":
              this._showNavigation = this.preferences.getBoolPref(data);
              this.updateDisplay();
              break;
            case "content.previews":
              this._showPreviews = this.preferences.getBoolPref(data);
              for (var i = 0; i < this.previews.length; i++) {
                this.previews[i].updateDisplay();
                this.previews[i].updateDocumentListeners();
              }
              if (this._showPreviews) {
                this._browserWidth = this._selected._browserWidth;
                this._browserHeight = this._selected._browserHeight;
                this._reflowComplete = false;
                this._checkReflow();
              }
              break;
            case "updatepreviews":
              this._updatePreviews = this.preferences.getBoolPref(data);
              for (var i = 0; i < this.previews.length; i++)
                this.previews[i].updateDocumentListeners();
              break;
            case "scrollselects":
              this._scrollSelects = this.preferences.getBoolPref(data);
              break;
            case "drawscrolled":
              this._drawScrolled = this.preferences.getBoolPref(data);
              this._invalidateAll();
              break;
#ifdef ${extension.debug}
            case "enablelogging":
              this._enableLogging = this.preferences.getBoolPref(data);
              break;
#endif
            case "validaterate":
              this._validateRate = this.preferences.getIntPref(data);
              break;
            case "loaderrordelay":
              this._getDelayPref(data, "loadError", true);
              break;
            case "unselectedloaderrordelay":
              this._getDelayPref(data, "loadError", false);
              break;
            case "loaddelay":
              this._getDelayPref(data, "load", true);
              break;
            case "unselectedloaddelay":
              this._getDelayPref(data, "load", false);
              break;
            case "scrolldelay":
              this._getDelayPref(data, "scroll", true);
              break;
            case "unselectedscrolldelay":
              this._getDelayPref(data, "scroll", false);
              break;
            case "textdelay":
              this._getDelayPref(data, "text", true);
              break;
            case "unselectedtextdelay":
              this._getDelayPref(data, "text", false);
              break;
            case "changedelay":
              this._getDelayPref(data, "change", true);
              break;
            case "unselectedchangedelay":
              this._getDelayPref(data, "change", false);
              break;
          }
        ]]>
        </body>
      </method>
